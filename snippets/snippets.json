{
	"function": {
		"prefix": "function",
		"body": "function ${1:func} takes ${2:nothing} returns ${3:nothing}\n\t$0\nendfunction",
		"description": "",
		"scope": "source.j, source.jass"
	},
	"globals": {
		"prefix": "globals",
		"body": "globals\n\t$0\nendglobals",
		"description": "",
		"scope": "source.j, source.jass"
	},
	"hashtable": {
		"prefix": "hashtable",
		"body": "hashtable ${1:HT} = InitHashtable()",
		"description": "",
		"scope": "source.j, source.jass"
	},
	"if": {
		"prefix": "if",
		"body": "if ${1:condition} then\n\t$0\nendif",
		"description": "",
		"scope": "source.j, source.jass"
	},
	"library": {
		"prefix": "library",
		"body": "library ${1:libname}\n\n\t$0\n\nendlibrary",
		"description": "",
		"scope": "source.j, source.jass"
	},
	"loop": {
		"prefix": "loop",
		"body": "loop\n\t$2\nexitwhen ${1:i>11}\n\t$0\nendloop",
		"description": "",
		"scope": "source.j, source.jass"
	},
	"setnull": {
		"prefix": "setnull",
		"body": "set ${1:u} = null",
		"description": "",
		"scope": "source.j, source.jass"
	},
	"set++": {
		"prefix": "set++",
		"body": "set ${1:i} = ${1:i} + ${2:1}",
		"description": "",
		"scope": "source.j, source.jass"
	},
	"AbilityId": {
		"prefix": "AbilityId",
		"body": "AbilityId( ${1:abilityIdString})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AbilityId2String": {
		"prefix": "AbilityId2String",
		"body": "AbilityId2String( ${1:abilityId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Acos": {
		"prefix": "Acos",
		"body": "Acos( ${1:x})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddHeroXP": {
		"prefix": "AddHeroXP",
		"body": "AddHeroXP( ${1:whichHero}, ${2:xpToAdd}, ${3:showEyeCandy})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddIndicator": {
		"prefix": "AddIndicator",
		"body": "AddIndicator( ${1:whichWidget}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddItemToAllStock": {
		"prefix": "AddItemToAllStock",
		"body": "AddItemToAllStock( ${1:itemId}, ${2:currentStock}, ${3:stockMax})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddItemToStock": {
		"prefix": "AddItemToStock",
		"body": "AddItemToStock( ${1:whichUnit}, ${2:itemId}, ${3:currentStock}, ${4:stockMax})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddLightning": {
		"prefix": "AddLightning",
		"body": "AddLightning( ${1:codeName}, ${2:checkVisibility}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddLightningEx": {
		"prefix": "AddLightningEx",
		"body": "AddLightningEx( ${1:codeName}, ${2:checkVisibility}, ${3:x1}, ${4:y1}, ${5:z1}, ${6:x2}, ${7:y2}, ${8:z2})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddPlayerTechResearched": {
		"prefix": "AddPlayerTechResearched",
		"body": "AddPlayerTechResearched( ${1:whichPlayer}, ${2:techid}, ${3:levels})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddResourceAmount": {
		"prefix": "AddResourceAmount",
		"body": "AddResourceAmount( ${1:whichUnit}, ${2:amount})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddSpecialEffect": {
		"prefix": "AddSpecialEffect",
		"body": "AddSpecialEffect( ${1:modelName}, ${2:x}, ${3:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddSpecialEffectLoc": {
		"prefix": "AddSpecialEffectLoc",
		"body": "AddSpecialEffectLoc( ${1:modelName}, ${2:where})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddSpecialEffectTarget": {
		"prefix": "AddSpecialEffectTarget",
		"body": "AddSpecialEffectTarget( ${1:modelName}, ${2:targetWidget}, ${3:attachPointName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddSpellEffect": {
		"prefix": "AddSpellEffect",
		"body": "AddSpellEffect( ${1:abilityString}, ${2:t}, ${3:x}, ${4:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddSpellEffectById": {
		"prefix": "AddSpellEffectById",
		"body": "AddSpellEffectById( ${1:abilityId}, ${2:t,real}, ${3:real})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddSpellEffectByIdLoc": {
		"prefix": "AddSpellEffectByIdLoc",
		"body": "AddSpellEffectByIdLoc( ${1:abilityId}, ${2:t,location})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddSpellEffectLoc": {
		"prefix": "AddSpellEffectLoc",
		"body": "AddSpellEffectLoc( ${1:abilityString}, ${2:t,location})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddSpellEffectTarget": {
		"prefix": "AddSpellEffectTarget",
		"body": "AddSpellEffectTarget( ${1:modelName}, ${2:t}, ${3:targetWidget}, ${4:attachPoint})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddSpellEffectTargetById": {
		"prefix": "AddSpellEffectTargetById",
		"body": "AddSpellEffectTargetById( ${1:abilityId}, ${2:t}, ${3:targetWidget}, ${4:attachPoint})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddUnitAnimationProperties": {
		"prefix": "AddUnitAnimationProperties",
		"body": "AddUnitAnimationProperties( ${1:whichUnit}, ${2:animProperties}, ${3:add})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddUnitToAllStock": {
		"prefix": "AddUnitToAllStock",
		"body": "AddUnitToAllStock( ${1:unitId}, ${2:currentStock}, ${3:stockMax})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddUnitToStock": {
		"prefix": "AddUnitToStock",
		"body": "AddUnitToStock( ${1:whichUnit}, ${2:unitId}, ${3:currentStock}, ${4:stockMax})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AddWeatherEffect": {
		"prefix": "AddWeatherEffect",
		"body": "AddWeatherEffect( ${1:where}, ${2:effectID})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AdjustCameraField": {
		"prefix": "AdjustCameraField",
		"body": "AdjustCameraField( ${1:whichField}, ${2:offset}, ${3:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"And": {
		"prefix": "And",
		"body": "And( ${1:operandA}, ${2:operandB})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Asin": {
		"prefix": "Asin",
		"body": "Asin( ${1:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Atan": {
		"prefix": "Atan",
		"body": "Atan( ${1:x})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Atan2": {
		"prefix": "Atan2",
		"body": "Atan2( ${1:y}, ${2:x})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"AttachSoundToUnit": {
		"prefix": "AttachSoundToUnit",
		"body": "AttachSoundToUnit( ${1:soundHandle}, ${2:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CachePlayerHeroData": {
		"prefix": "CachePlayerHeroData",
		"body": "CachePlayerHeroData( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetSmoothingFactor": {
		"prefix": "CameraSetSmoothingFactor",
		"body": "CameraSetSmoothingFactor( ${1:factor})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetSourceNoise": {
		"prefix": "CameraSetSourceNoise",
		"body": "CameraSetSourceNoise( ${1:mag}, ${2:velocity})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetSourceNoiseEx": {
		"prefix": "CameraSetSourceNoiseEx",
		"body": "CameraSetSourceNoiseEx( ${1:mag}, ${2:velocity}, ${3:vertOnly})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetTargetNoise": {
		"prefix": "CameraSetTargetNoise",
		"body": "CameraSetTargetNoise( ${1:mag}, ${2:velocity})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetTargetNoiseEx": {
		"prefix": "CameraSetTargetNoiseEx",
		"body": "CameraSetTargetNoiseEx( ${1:mag}, ${2:velocity}, ${3:vertOnly})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetupApply": {
		"prefix": "CameraSetupApply",
		"body": "CameraSetupApply( ${1:whichSetup}, ${2:doPan}, ${3:panTimed})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetupApplyForceDuration": {
		"prefix": "CameraSetupApplyForceDuration",
		"body": "CameraSetupApplyForceDuration( ${1:whichSetup}, ${2:doPan}, ${3:forceDuration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetupApplyForceDurationWithZ": {
		"prefix": "CameraSetupApplyForceDurationWithZ",
		"body": "CameraSetupApplyForceDurationWithZ( ${1:whichSetup}, ${2:zDestOffset}, ${3:forceDuration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetupApplyWithZ": {
		"prefix": "CameraSetupApplyWithZ",
		"body": "CameraSetupApplyWithZ( ${1:whichSetup}, ${2:zDestOffset})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetupGetDestPositionLoc": {
		"prefix": "CameraSetupGetDestPositionLoc",
		"body": "CameraSetupGetDestPositionLoc( ${1:whichSetup})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetupGetDestPositionX": {
		"prefix": "CameraSetupGetDestPositionX",
		"body": "CameraSetupGetDestPositionX( ${1:whichSetup})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetupGetDestPositionY": {
		"prefix": "CameraSetupGetDestPositionY",
		"body": "CameraSetupGetDestPositionY( ${1:whichSetup})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetupGetField": {
		"prefix": "CameraSetupGetField",
		"body": "CameraSetupGetField( ${1:whichSetup}, ${2:whichField})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetupSetDestPosition": {
		"prefix": "CameraSetupSetDestPosition",
		"body": "CameraSetupSetDestPosition( ${1:whichSetup}, ${2:x}, ${3:y}, ${4:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CameraSetupSetField": {
		"prefix": "CameraSetupSetField",
		"body": "CameraSetupSetField( ${1:whichSetup}, ${2:whichField}, ${3:value}, ${4:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ChangeLevel": {
		"prefix": "ChangeLevel",
		"body": "ChangeLevel( ${1:newLevel}, ${2:doScoreScreen})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Cheat": {
		"prefix": "Cheat",
		"body": "Cheat( ${1:cheatStr})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ChooseRandomCreep": {
		"prefix": "ChooseRandomCreep",
		"body": "ChooseRandomCreep( ${1:level})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ChooseRandomItem": {
		"prefix": "ChooseRandomItem",
		"body": "ChooseRandomItem( ${1:level})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ChooseRandomItemEx": {
		"prefix": "ChooseRandomItemEx",
		"body": "ChooseRandomItemEx( ${1:whichType}, ${2:level})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ChooseRandomNPBuilding": {
		"prefix": "ChooseRandomNPBuilding",
		"body": "ChooseRandomNPBuilding()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ClearMapMusic": {
		"prefix": "ClearMapMusic",
		"body": "ClearMapMusic()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ClearSelection": {
		"prefix": "ClearSelection",
		"body": "ClearSelection()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ClearTextMessages": {
		"prefix": "ClearTextMessages",
		"body": "ClearTextMessages()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CommandAI": {
		"prefix": "CommandAI",
		"body": "CommandAI( ${1:num}, ${2:command}, ${3:data})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Condition": {
		"prefix": "Condition",
		"body": "Condition( ${1:func})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertAIDifficulty": {
		"prefix": "ConvertAIDifficulty",
		"body": "ConvertAIDifficulty( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertAllianceType": {
		"prefix": "ConvertAllianceType",
		"body": "ConvertAllianceType( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertAttackType": {
		"prefix": "ConvertAttackType",
		"body": "ConvertAttackType( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertBlendMode": {
		"prefix": "ConvertBlendMode",
		"body": "ConvertBlendMode( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertCameraField": {
		"prefix": "ConvertCameraField",
		"body": "ConvertCameraField( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertDamageType": {
		"prefix": "ConvertDamageType",
		"body": "ConvertDamageType( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertDialogEvent": {
		"prefix": "ConvertDialogEvent",
		"body": "ConvertDialogEvent( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertEffectType": {
		"prefix": "ConvertEffectType",
		"body": "ConvertEffectType( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertFGameState": {
		"prefix": "ConvertFGameState",
		"body": "ConvertFGameState( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertFogState": {
		"prefix": "ConvertFogState",
		"body": "ConvertFogState( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertGameDifficulty": {
		"prefix": "ConvertGameDifficulty",
		"body": "ConvertGameDifficulty( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertGameEvent": {
		"prefix": "ConvertGameEvent",
		"body": "ConvertGameEvent( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertGameSpeed": {
		"prefix": "ConvertGameSpeed",
		"body": "ConvertGameSpeed( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertGameType": {
		"prefix": "ConvertGameType",
		"body": "ConvertGameType( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertIGameState": {
		"prefix": "ConvertIGameState",
		"body": "ConvertIGameState( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertItemType": {
		"prefix": "ConvertItemType",
		"body": "ConvertItemType( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertLimitOp": {
		"prefix": "ConvertLimitOp",
		"body": "ConvertLimitOp( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertMapControl": {
		"prefix": "ConvertMapControl",
		"body": "ConvertMapControl( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertMapDensity": {
		"prefix": "ConvertMapDensity",
		"body": "ConvertMapDensity( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertMapFlag": {
		"prefix": "ConvertMapFlag",
		"body": "ConvertMapFlag( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertMapSetting": {
		"prefix": "ConvertMapSetting",
		"body": "ConvertMapSetting( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertMapVisibility": {
		"prefix": "ConvertMapVisibility",
		"body": "ConvertMapVisibility( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertPathingType": {
		"prefix": "ConvertPathingType",
		"body": "ConvertPathingType( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertPlacement": {
		"prefix": "ConvertPlacement",
		"body": "ConvertPlacement( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertPlayerColor": {
		"prefix": "ConvertPlayerColor",
		"body": "ConvertPlayerColor( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertPlayerEvent": {
		"prefix": "ConvertPlayerEvent",
		"body": "ConvertPlayerEvent( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertPlayerGameResult": {
		"prefix": "ConvertPlayerGameResult",
		"body": "ConvertPlayerGameResult( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertPlayerScore": {
		"prefix": "ConvertPlayerScore",
		"body": "ConvertPlayerScore( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertPlayerSlotState": {
		"prefix": "ConvertPlayerSlotState",
		"body": "ConvertPlayerSlotState( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertPlayerState": {
		"prefix": "ConvertPlayerState",
		"body": "ConvertPlayerState( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertPlayerUnitEvent": {
		"prefix": "ConvertPlayerUnitEvent",
		"body": "ConvertPlayerUnitEvent( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertRace": {
		"prefix": "ConvertRace",
		"body": "ConvertRace( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertRacePref": {
		"prefix": "ConvertRacePref",
		"body": "ConvertRacePref( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertRarityControl": {
		"prefix": "ConvertRarityControl",
		"body": "ConvertRarityControl( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertSoundType": {
		"prefix": "ConvertSoundType",
		"body": "ConvertSoundType( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertStartLocPrio": {
		"prefix": "ConvertStartLocPrio",
		"body": "ConvertStartLocPrio( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertTexMapFlags": {
		"prefix": "ConvertTexMapFlags",
		"body": "ConvertTexMapFlags( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertUnitEvent": {
		"prefix": "ConvertUnitEvent",
		"body": "ConvertUnitEvent( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertUnitState": {
		"prefix": "ConvertUnitState",
		"body": "ConvertUnitState( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertUnitType": {
		"prefix": "ConvertUnitType",
		"body": "ConvertUnitType( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertVersion": {
		"prefix": "ConvertVersion",
		"body": "ConvertVersion( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertVolumeGroup": {
		"prefix": "ConvertVolumeGroup",
		"body": "ConvertVolumeGroup( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertWeaponType": {
		"prefix": "ConvertWeaponType",
		"body": "ConvertWeaponType( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ConvertWidgetEvent": {
		"prefix": "ConvertWidgetEvent",
		"body": "ConvertWidgetEvent( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CopySaveGame": {
		"prefix": "CopySaveGame",
		"body": "CopySaveGame( ${1:sourceSaveName}, ${2:destSaveName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Cos": {
		"prefix": "Cos",
		"body": "Cos( ${1:radians})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateBlightedGoldmine": {
		"prefix": "CreateBlightedGoldmine",
		"body": "CreateBlightedGoldmine( ${1:id}, ${2:x}, ${3:y}, ${4:face})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateCameraSetup": {
		"prefix": "CreateCameraSetup",
		"body": "CreateCameraSetup()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateCorpse": {
		"prefix": "CreateCorpse",
		"body": "CreateCorpse( ${1:whichPlayer}, ${2:unitid}, ${3:x}, ${4:y}, ${5:face})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateDeadDestructable": {
		"prefix": "CreateDeadDestructable",
		"body": "CreateDeadDestructable( ${1:objectid}, ${2:x}, ${3:y}, ${4:face}, ${5:scale}, ${6:variation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateDeadDestructableZ": {
		"prefix": "CreateDeadDestructableZ",
		"body": "CreateDeadDestructableZ( ${1:objectid}, ${2:x}, ${3:y}, ${4:z}, ${5:face}, ${6:scale}, ${7:variation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateDefeatCondition": {
		"prefix": "CreateDefeatCondition",
		"body": "CreateDefeatCondition()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateDestructable": {
		"prefix": "CreateDestructable",
		"body": "CreateDestructable( ${1:objectid}, ${2:x}, ${3:y}, ${4:face}, ${5:scale}, ${6:variation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateDestructableZ": {
		"prefix": "CreateDestructableZ",
		"body": "CreateDestructableZ( ${1:objectid}, ${2:x}, ${3:y}, ${4:z}, ${5:face}, ${6:scale}, ${7:variation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateFogModifierRadius": {
		"prefix": "CreateFogModifierRadius",
		"body": "CreateFogModifierRadius( ${1:forWhichPlayer}, ${2:whichState}, ${3:centerx}, ${4:centerY}, ${5:radius}, ${6:useSharedVision}, ${7:afterUnits})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateFogModifierRadiusLoc": {
		"prefix": "CreateFogModifierRadiusLoc",
		"body": "CreateFogModifierRadiusLoc( ${1:forWhichPlayer}, ${2:whichState}, ${3:center}, ${4:radius}, ${5:useSharedVision}, ${6:afterUnits})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateFogModifierRect": {
		"prefix": "CreateFogModifierRect",
		"body": "CreateFogModifierRect( ${1:forWhichPlayer}, ${2:whichState}, ${3:where}, ${4:useSharedVision}, ${5:afterUnits})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateForce": {
		"prefix": "CreateForce",
		"body": "CreateForce()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateGroup": {
		"prefix": "CreateGroup",
		"body": "CreateGroup()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateImage": {
		"prefix": "CreateImage",
		"body": "CreateImage( ${1:file}, ${2:sizeX}, ${3:sizeY}, ${4:sizeZ}, ${5:posX}, ${6:posY}, ${7:posZ}, ${8:originX}, ${9:originY}, ${10:originZ}, ${11:imageType})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateItem": {
		"prefix": "CreateItem",
		"body": "CreateItem( ${1:itemid}, ${2:x}, ${3:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateItemPool": {
		"prefix": "CreateItemPool",
		"body": "CreateItemPool()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateLeaderboard": {
		"prefix": "CreateLeaderboard",
		"body": "CreateLeaderboard()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateMIDISound": {
		"prefix": "CreateMIDISound",
		"body": "CreateMIDISound( ${1:soundLabel}, ${2:fadeInRate}, ${3:fadeOutRate})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateMultiboard": {
		"prefix": "CreateMultiboard",
		"body": "CreateMultiboard()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateQuest": {
		"prefix": "CreateQuest",
		"body": "CreateQuest()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateRegion": {
		"prefix": "CreateRegion",
		"body": "CreateRegion()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateSound": {
		"prefix": "CreateSound",
		"body": "CreateSound( ${1:fileName}, ${2:looping}, ${3:is3D}, ${4:stopwhenoutofrange}, ${5:fadeInRate}, ${6:fadeOutRate}, ${7:eaxSetting})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateSoundFilenameWithLabel": {
		"prefix": "CreateSoundFilenameWithLabel",
		"body": "CreateSoundFilenameWithLabel( ${1:fileName}, ${2:looping}, ${3:is3D}, ${4:stopwhenoutofrange}, ${5:fadeInRate}, ${6:fadeOutRate}, ${7:SLKEntryName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateSoundFromLabel": {
		"prefix": "CreateSoundFromLabel",
		"body": "CreateSoundFromLabel( ${1:soundLabel}, ${2:looping}, ${3:is3D}, ${4:stopwhenoutofrange}, ${5:fadeInRate}, ${6:fadeOutRate})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateTextTag": {
		"prefix": "CreateTextTag",
		"body": "CreateTextTag()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateTimer": {
		"prefix": "CreateTimer",
		"body": "CreateTimer()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateTimerDialog": {
		"prefix": "CreateTimerDialog",
		"body": "CreateTimerDialog( ${1:t})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateTrackable": {
		"prefix": "CreateTrackable",
		"body": "CreateTrackable( ${1:trackableModelPath}, ${2:x}, ${3:y}, ${4:facing})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateTrigger": {
		"prefix": "CreateTrigger",
		"body": "CreateTrigger()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateUbersplat": {
		"prefix": "CreateUbersplat",
		"body": "CreateUbersplat( ${1:x}, ${2:y}, ${3:name}, ${4:red}, ${5:green}, ${6:blue}, ${7:alpha}, ${8:forcePaused}, ${9:noBirthTime})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateUnit": {
		"prefix": "CreateUnit",
		"body": "CreateUnit( ${1:id}, ${2:unitid}, ${3:x}, ${4:y}, ${5:face})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateUnitAtLoc": {
		"prefix": "CreateUnitAtLoc",
		"body": "CreateUnitAtLoc( ${1:id}, ${2:unitid}, ${3:whichLocation}, ${4:face})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateUnitAtLocByName": {
		"prefix": "CreateUnitAtLocByName",
		"body": "CreateUnitAtLocByName( ${1:id}, ${2:unitname}, ${3:whichLocation}, ${4:face})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateUnitByName": {
		"prefix": "CreateUnitByName",
		"body": "CreateUnitByName( ${1:whichPlayer}, ${2:unitname}, ${3:x}, ${4:y}, ${5:face})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CreateUnitPool": {
		"prefix": "CreateUnitPool",
		"body": "CreateUnitPool()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"CripplePlayer": {
		"prefix": "CripplePlayer",
		"body": "CripplePlayer( ${1:whichPlayer}, ${2:toWhichPlayers}, ${3:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DecUnitAbilityLevel": {
		"prefix": "DecUnitAbilityLevel",
		"body": "DecUnitAbilityLevel( ${1:whichUnit}, ${2:abilcode})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DefeatConditionSetDescription": {
		"prefix": "DefeatConditionSetDescription",
		"body": "DefeatConditionSetDescription( ${1:whichCondition}, ${2:description})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DefineStartLocation": {
		"prefix": "DefineStartLocation",
		"body": "DefineStartLocation( ${1:whichStartLoc}, ${2:x}, ${3:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DefineStartLocationLoc": {
		"prefix": "DefineStartLocationLoc",
		"body": "DefineStartLocationLoc( ${1:whichStartLoc}, ${2:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Deg2Rad": {
		"prefix": "Deg2Rad",
		"body": "Deg2Rad( ${1:degrees})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyBoolExpr": {
		"prefix": "DestroyBoolExpr",
		"body": "DestroyBoolExpr( ${1:e})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyCondition": {
		"prefix": "DestroyCondition",
		"body": "DestroyCondition( ${1:c})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyDefeatCondition": {
		"prefix": "DestroyDefeatCondition",
		"body": "DestroyDefeatCondition( ${1:whichCondition})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyEffect": {
		"prefix": "DestroyEffect",
		"body": "DestroyEffect( ${1:whichEffect})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyFilter": {
		"prefix": "DestroyFilter",
		"body": "DestroyFilter( ${1:f})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyFogModifier": {
		"prefix": "DestroyFogModifier",
		"body": "DestroyFogModifier( ${1:whichFogModifier})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyForce": {
		"prefix": "DestroyForce",
		"body": "DestroyForce( ${1:whichForce})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyGroup": {
		"prefix": "DestroyGroup",
		"body": "DestroyGroup( ${1:whichGroup})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyImage": {
		"prefix": "DestroyImage",
		"body": "DestroyImage( ${1:whichImage})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyItemPool": {
		"prefix": "DestroyItemPool",
		"body": "DestroyItemPool( ${1:whichItemPool})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyLeaderboard": {
		"prefix": "DestroyLeaderboard",
		"body": "DestroyLeaderboard( ${1:lb})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyLightning": {
		"prefix": "DestroyLightning",
		"body": "DestroyLightning( ${1:whichBolt})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyMultiboard": {
		"prefix": "DestroyMultiboard",
		"body": "DestroyMultiboard( ${1:lb})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyQuest": {
		"prefix": "DestroyQuest",
		"body": "DestroyQuest( ${1:whichQuest})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyTextTag": {
		"prefix": "DestroyTextTag",
		"body": "DestroyTextTag( ${1:t})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyTimer": {
		"prefix": "DestroyTimer",
		"body": "DestroyTimer( ${1:whichTimer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyTimerDialog": {
		"prefix": "DestroyTimerDialog",
		"body": "DestroyTimerDialog( ${1:whichDialog})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyTrigger": {
		"prefix": "DestroyTrigger",
		"body": "DestroyTrigger( ${1:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyUbersplat": {
		"prefix": "DestroyUbersplat",
		"body": "DestroyUbersplat( ${1:whichSplat})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestroyUnitPool": {
		"prefix": "DestroyUnitPool",
		"body": "DestroyUnitPool( ${1:whichPool})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DestructableRestoreLife": {
		"prefix": "DestructableRestoreLife",
		"body": "DestructableRestoreLife( ${1:d}, ${2:life}, ${3:birth})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DialogAddButton": {
		"prefix": "DialogAddButton",
		"body": "DialogAddButton( ${1:whichDialog}, ${2:buttonText}, ${3:hotkey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DialogAddQuitButton": {
		"prefix": "DialogAddQuitButton",
		"body": "DialogAddQuitButton( ${1:whichDialog}, ${2:doScoreScreen}, ${3:buttonText}, ${4:hotkey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DialogClear": {
		"prefix": "DialogClear",
		"body": "DialogClear( ${1:whichDialog})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DialogCreate": {
		"prefix": "DialogCreate",
		"body": "DialogCreate()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DialogDestroy": {
		"prefix": "DialogDestroy",
		"body": "DialogDestroy( ${1:whichDialog})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DialogDisplay": {
		"prefix": "DialogDisplay",
		"body": "DialogDisplay( ${1:whichPlayer}, ${2:whichDialog}, ${3:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DialogSetMessage": {
		"prefix": "DialogSetMessage",
		"body": "DialogSetMessage( ${1:whichDialog}, ${2:messageText})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DisableRestartMission": {
		"prefix": "DisableRestartMission",
		"body": "DisableRestartMission( ${1:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DisableTrigger": {
		"prefix": "DisableTrigger",
		"body": "DisableTrigger( ${1:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DisplayCineFilter": {
		"prefix": "DisplayCineFilter",
		"body": "DisplayCineFilter( ${1:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DisplayLoadDialog": {
		"prefix": "DisplayLoadDialog",
		"body": "DisplayLoadDialog()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DisplayTextToPlayer": {
		"prefix": "DisplayTextToPlayer",
		"body": "DisplayTextToPlayer( ${1:toPlayer}, ${2:x}, ${3:y}, ${4:message})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DisplayTimedTextFromPlayer": {
		"prefix": "DisplayTimedTextFromPlayer",
		"body": "DisplayTimedTextFromPlayer( ${1:toPlayer}, ${2:x}, ${3:y}, ${4:duration}, ${5:message})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DisplayTimedTextToPlayer": {
		"prefix": "DisplayTimedTextToPlayer",
		"body": "DisplayTimedTextToPlayer( ${1:toPlayer}, ${2:x}, ${3:y}, ${4:duration}, ${5:message})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"DoNotSaveReplay": {
		"prefix": "DoNotSaveReplay",
		"body": "DoNotSaveReplay()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EnableDragSelect": {
		"prefix": "EnableDragSelect",
		"body": "EnableDragSelect( ${1:state}, ${2:ui})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EnableMinimapFilterButtons": {
		"prefix": "EnableMinimapFilterButtons",
		"body": "EnableMinimapFilterButtons( ${1:enableAlly}, ${2:enableCreep})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EnableOcclusion": {
		"prefix": "EnableOcclusion",
		"body": "EnableOcclusion( ${1:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EnablePreSelect": {
		"prefix": "EnablePreSelect",
		"body": "EnablePreSelect( ${1:state}, ${2:ui})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EnableSelect": {
		"prefix": "EnableSelect",
		"body": "EnableSelect( ${1:state}, ${2:ui})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EnableTrigger": {
		"prefix": "EnableTrigger",
		"body": "EnableTrigger( ${1:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EnableUserControl": {
		"prefix": "EnableUserControl",
		"body": "EnableUserControl( ${1:b})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EnableUserUI": {
		"prefix": "EnableUserUI",
		"body": "EnableUserUI( ${1:b})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EnableWeatherEffect": {
		"prefix": "EnableWeatherEffect",
		"body": "EnableWeatherEffect( ${1:whichEffect}, ${2:enable})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EnableWorldFogBoundary": {
		"prefix": "EnableWorldFogBoundary",
		"body": "EnableWorldFogBoundary( ${1:b})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EndCinematicScene": {
		"prefix": "EndCinematicScene",
		"body": "EndCinematicScene()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EndGame": {
		"prefix": "EndGame",
		"body": "EndGame( ${1:doScoreScreen})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EndThematicMusic": {
		"prefix": "EndThematicMusic",
		"body": "EndThematicMusic()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EnumDestructablesInRect": {
		"prefix": "EnumDestructablesInRect",
		"body": "EnumDestructablesInRect( ${1:r}, ${2:filter}, ${3:actionFunc})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"EnumItemsInRect": {
		"prefix": "EnumItemsInRect",
		"body": "EnumItemsInRect( ${1:r}, ${2:filter}, ${3:actionFunc})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ExecuteFunc": {
		"prefix": "ExecuteFunc",
		"body": "ExecuteFunc( ${1:funcName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Filter": {
		"prefix": "Filter",
		"body": "Filter( ${1:func})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FinishUbersplat": {
		"prefix": "FinishUbersplat",
		"body": "FinishUbersplat( ${1:whichSplat})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FirstOfGroup": {
		"prefix": "FirstOfGroup",
		"body": "FirstOfGroup( ${1:whichGroup})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FlashQuestDialogButton": {
		"prefix": "FlashQuestDialogButton",
		"body": "FlashQuestDialogButton()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FlushChildHashtable": {
		"prefix": "FlushChildHashtable",
		"body": "FlushChildHashtable( ${1:table}, ${2:parentKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FlushGameCache": {
		"prefix": "FlushGameCache",
		"body": "FlushGameCache( ${1:cache})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FlushParentHashtable": {
		"prefix": "FlushParentHashtable",
		"body": "FlushParentHashtable( ${1:table})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FlushStoredBoolean": {
		"prefix": "FlushStoredBoolean",
		"body": "FlushStoredBoolean( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FlushStoredInteger": {
		"prefix": "FlushStoredInteger",
		"body": "FlushStoredInteger( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FlushStoredMission": {
		"prefix": "FlushStoredMission",
		"body": "FlushStoredMission( ${1:cache}, ${2:missionKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FlushStoredReal": {
		"prefix": "FlushStoredReal",
		"body": "FlushStoredReal( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FlushStoredString": {
		"prefix": "FlushStoredString",
		"body": "FlushStoredString( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FlushStoredUnit": {
		"prefix": "FlushStoredUnit",
		"body": "FlushStoredUnit( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FogEnable": {
		"prefix": "FogEnable",
		"body": "FogEnable( ${1:enable})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FogMaskEnable": {
		"prefix": "FogMaskEnable",
		"body": "FogMaskEnable( ${1:enable})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FogModifierStart": {
		"prefix": "FogModifierStart",
		"body": "FogModifierStart( ${1:whichFogModifier})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"FogModifierStop": {
		"prefix": "FogModifierStop",
		"body": "FogModifierStop( ${1:whichFogModifier})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForceAddPlayer": {
		"prefix": "ForceAddPlayer",
		"body": "ForceAddPlayer( ${1:whichForce}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForceCampaignSelectScreen": {
		"prefix": "ForceCampaignSelectScreen",
		"body": "ForceCampaignSelectScreen()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForceCinematicSubtitles": {
		"prefix": "ForceCinematicSubtitles",
		"body": "ForceCinematicSubtitles( ${1:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForceClear": {
		"prefix": "ForceClear",
		"body": "ForceClear( ${1:whichForce})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForceEnumAllies": {
		"prefix": "ForceEnumAllies",
		"body": "ForceEnumAllies( ${1:whichForce}, ${2:whichPlayer}, ${3:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForceEnumEnemies": {
		"prefix": "ForceEnumEnemies",
		"body": "ForceEnumEnemies( ${1:whichForce}, ${2:whichPlayer}, ${3:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForceEnumPlayers": {
		"prefix": "ForceEnumPlayers",
		"body": "ForceEnumPlayers( ${1:whichForce}, ${2:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForceEnumPlayersCounted": {
		"prefix": "ForceEnumPlayersCounted",
		"body": "ForceEnumPlayersCounted( ${1:whichForce}, ${2:filter}, ${3:countLimit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForcePlayerStartLocation": {
		"prefix": "ForcePlayerStartLocation",
		"body": "ForcePlayerStartLocation( ${1:whichPlayer}, ${2:startLocIndex})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForceQuestDialogUpdate": {
		"prefix": "ForceQuestDialogUpdate",
		"body": "ForceQuestDialogUpdate()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForceRemovePlayer": {
		"prefix": "ForceRemovePlayer",
		"body": "ForceRemovePlayer( ${1:whichForce}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForceUICancel": {
		"prefix": "ForceUICancel",
		"body": "ForceUICancel()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForceUIKey": {
		"prefix": "ForceUIKey",
		"body": "ForceUIKey( ${1:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForForce": {
		"prefix": "ForForce",
		"body": "ForForce( ${1:whichForce}, ${2:callback})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ForGroup": {
		"prefix": "ForGroup",
		"body": "ForGroup( ${1:whichGroup}, ${2:callback})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetAbilityEffect": {
		"prefix": "GetAbilityEffect",
		"body": "GetAbilityEffect( ${1:abilityString}, ${2:t}, ${3:index})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetAbilityEffectById": {
		"prefix": "GetAbilityEffectById",
		"body": "GetAbilityEffectById( ${1:abilityId}, ${2:t}, ${3:index})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetAbilitySound": {
		"prefix": "GetAbilitySound",
		"body": "GetAbilitySound( ${1:abilityString}, ${2:t})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetAbilitySoundById": {
		"prefix": "GetAbilitySoundById",
		"body": "GetAbilitySoundById( ${1:abilityId}, ${2:t})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetAIDifficulty": {
		"prefix": "GetAIDifficulty",
		"body": "GetAIDifficulty( ${1:num})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetAllyColorFilterState": {
		"prefix": "GetAllyColorFilterState",
		"body": "GetAllyColorFilterState()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetAttacker": {
		"prefix": "GetAttacker",
		"body": "GetAttacker()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetBuyingUnit": {
		"prefix": "GetBuyingUnit",
		"body": "GetBuyingUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraBoundMaxX": {
		"prefix": "GetCameraBoundMaxX",
		"body": "GetCameraBoundMaxX()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraBoundMaxY": {
		"prefix": "GetCameraBoundMaxY",
		"body": "GetCameraBoundMaxY()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraBoundMinX": {
		"prefix": "GetCameraBoundMinX",
		"body": "GetCameraBoundMinX()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraBoundMinY": {
		"prefix": "GetCameraBoundMinY",
		"body": "GetCameraBoundMinY()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraEyePositionLoc": {
		"prefix": "GetCameraEyePositionLoc",
		"body": "GetCameraEyePositionLoc()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraEyePositionX": {
		"prefix": "GetCameraEyePositionX",
		"body": "GetCameraEyePositionX()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraEyePositionY": {
		"prefix": "GetCameraEyePositionY",
		"body": "GetCameraEyePositionY()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraEyePositionZ": {
		"prefix": "GetCameraEyePositionZ",
		"body": "GetCameraEyePositionZ()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraField": {
		"prefix": "GetCameraField",
		"body": "GetCameraField( ${1:whichField})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraMargin": {
		"prefix": "GetCameraMargin",
		"body": "GetCameraMargin( ${1:whichMargin})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraTargetPositionLoc": {
		"prefix": "GetCameraTargetPositionLoc",
		"body": "GetCameraTargetPositionLoc()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraTargetPositionX": {
		"prefix": "GetCameraTargetPositionX",
		"body": "GetCameraTargetPositionX()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraTargetPositionY": {
		"prefix": "GetCameraTargetPositionY",
		"body": "GetCameraTargetPositionY()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCameraTargetPositionZ": {
		"prefix": "GetCameraTargetPositionZ",
		"body": "GetCameraTargetPositionZ()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCancelledStructure": {
		"prefix": "GetCancelledStructure",
		"body": "GetCancelledStructure()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetChangingUnit": {
		"prefix": "GetChangingUnit",
		"body": "GetChangingUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetChangingUnitPrevOwner": {
		"prefix": "GetChangingUnitPrevOwner",
		"body": "GetChangingUnitPrevOwner()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetClickedButton": {
		"prefix": "GetClickedButton",
		"body": "GetClickedButton()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetClickedDialog": {
		"prefix": "GetClickedDialog",
		"body": "GetClickedDialog()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetConstructedStructure": {
		"prefix": "GetConstructedStructure",
		"body": "GetConstructedStructure()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetConstructingStructure": {
		"prefix": "GetConstructingStructure",
		"body": "GetConstructingStructure()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCreatureDensity": {
		"prefix": "GetCreatureDensity",
		"body": "GetCreatureDensity()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCreepCampFilterState": {
		"prefix": "GetCreepCampFilterState",
		"body": "GetCreepCampFilterState()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetCustomCampaignButtonVisible": {
		"prefix": "GetCustomCampaignButtonVisible",
		"body": "GetCustomCampaignButtonVisible( ${1:whichButton})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetDecayingUnit": {
		"prefix": "GetDecayingUnit",
		"body": "GetDecayingUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetDefaultDifficulty": {
		"prefix": "GetDefaultDifficulty",
		"body": "GetDefaultDifficulty()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetDestructableLife": {
		"prefix": "GetDestructableLife",
		"body": "GetDestructableLife( ${1:d})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetDestructableMaxLife": {
		"prefix": "GetDestructableMaxLife",
		"body": "GetDestructableMaxLife( ${1:d})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetDestructableName": {
		"prefix": "GetDestructableName",
		"body": "GetDestructableName( ${1:d})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetDestructableOccluderHeight": {
		"prefix": "GetDestructableOccluderHeight",
		"body": "GetDestructableOccluderHeight( ${1:d})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetDestructableTypeId": {
		"prefix": "GetDestructableTypeId",
		"body": "GetDestructableTypeId( ${1:d})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetDestructableX": {
		"prefix": "GetDestructableX",
		"body": "GetDestructableX( ${1:d})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetDestructableY": {
		"prefix": "GetDestructableY",
		"body": "GetDestructableY( ${1:d})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetDetectedUnit": {
		"prefix": "GetDetectedUnit",
		"body": "GetDetectedUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetDyingUnit": {
		"prefix": "GetDyingUnit",
		"body": "GetDyingUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEnteringUnit": {
		"prefix": "GetEnteringUnit",
		"body": "GetEnteringUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEnumDestructable": {
		"prefix": "GetEnumDestructable",
		"body": "GetEnumDestructable()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEnumItem": {
		"prefix": "GetEnumItem",
		"body": "GetEnumItem()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEnumPlayer": {
		"prefix": "GetEnumPlayer",
		"body": "GetEnumPlayer()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEnumUnit": {
		"prefix": "GetEnumUnit",
		"body": "GetEnumUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEventDamage": {
		"prefix": "GetEventDamage",
		"body": "GetEventDamage()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEventDamageSource": {
		"prefix": "GetEventDamageSource",
		"body": "GetEventDamageSource()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEventDetectingPlayer": {
		"prefix": "GetEventDetectingPlayer",
		"body": "GetEventDetectingPlayer()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEventGameState": {
		"prefix": "GetEventGameState",
		"body": "GetEventGameState()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEventPlayerChatString": {
		"prefix": "GetEventPlayerChatString",
		"body": "GetEventPlayerChatString()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEventPlayerChatStringMatched": {
		"prefix": "GetEventPlayerChatStringMatched",
		"body": "GetEventPlayerChatStringMatched()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEventPlayerState": {
		"prefix": "GetEventPlayerState",
		"body": "GetEventPlayerState()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEventTargetUnit": {
		"prefix": "GetEventTargetUnit",
		"body": "GetEventTargetUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetEventUnitState": {
		"prefix": "GetEventUnitState",
		"body": "GetEventUnitState()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetExpiredTimer": {
		"prefix": "GetExpiredTimer",
		"body": "GetExpiredTimer()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetFilterDestructable": {
		"prefix": "GetFilterDestructable",
		"body": "GetFilterDestructable()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetFilterItem": {
		"prefix": "GetFilterItem",
		"body": "GetFilterItem()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetFilterPlayer": {
		"prefix": "GetFilterPlayer",
		"body": "GetFilterPlayer()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetFilterUnit": {
		"prefix": "GetFilterUnit",
		"body": "GetFilterUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetFloatGameState": {
		"prefix": "GetFloatGameState",
		"body": "GetFloatGameState( ${1:whichFloatGameState})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetFoodMade": {
		"prefix": "GetFoodMade",
		"body": "GetFoodMade( ${1:unitId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetFoodUsed": {
		"prefix": "GetFoodUsed",
		"body": "GetFoodUsed( ${1:unitId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetGameDifficulty": {
		"prefix": "GetGameDifficulty",
		"body": "GetGameDifficulty()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetGamePlacement": {
		"prefix": "GetGamePlacement",
		"body": "GetGamePlacement()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetGameSpeed": {
		"prefix": "GetGameSpeed",
		"body": "GetGameSpeed()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetGameTypeSelected": {
		"prefix": "GetGameTypeSelected",
		"body": "GetGameTypeSelected()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetHandleId": {
		"prefix": "GetHandleId",
		"body": "GetHandleId( ${1:h})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetHeroAgi": {
		"prefix": "GetHeroAgi",
		"body": "GetHeroAgi( ${1:whichHero}, ${2:includeBonuses})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetHeroInt": {
		"prefix": "GetHeroInt",
		"body": "GetHeroInt( ${1:whichHero}, ${2:includeBonuses})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetHeroLevel": {
		"prefix": "GetHeroLevel",
		"body": "GetHeroLevel( ${1:whichHero})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetHeroProperName": {
		"prefix": "GetHeroProperName",
		"body": "GetHeroProperName( ${1:whichHero})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetHeroSkillPoints": {
		"prefix": "GetHeroSkillPoints",
		"body": "GetHeroSkillPoints( ${1:whichHero})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetHeroStr": {
		"prefix": "GetHeroStr",
		"body": "GetHeroStr( ${1:whichHero}, ${2:includeBonuses})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetHeroXP": {
		"prefix": "GetHeroXP",
		"body": "GetHeroXP( ${1:whichHero})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetIntegerGameState": {
		"prefix": "GetIntegerGameState",
		"body": "GetIntegerGameState( ${1:whichIntegerGameState})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetIssuedOrderId": {
		"prefix": "GetIssuedOrderId",
		"body": "GetIssuedOrderId()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetItemCharges": {
		"prefix": "GetItemCharges",
		"body": "GetItemCharges( ${1:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetItemLevel": {
		"prefix": "GetItemLevel",
		"body": "GetItemLevel( ${1:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetItemName": {
		"prefix": "GetItemName",
		"body": "GetItemName( ${1:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetItemPlayer": {
		"prefix": "GetItemPlayer",
		"body": "GetItemPlayer( ${1:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetItemType": {
		"prefix": "GetItemType",
		"body": "GetItemType( ${1:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetItemTypeId": {
		"prefix": "GetItemTypeId",
		"body": "GetItemTypeId( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetItemUserData": {
		"prefix": "GetItemUserData",
		"body": "GetItemUserData( ${1:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetItemX": {
		"prefix": "GetItemX",
		"body": "GetItemX( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetItemY": {
		"prefix": "GetItemY",
		"body": "GetItemY( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetKillingUnit": {
		"prefix": "GetKillingUnit",
		"body": "GetKillingUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLearnedSkill": {
		"prefix": "GetLearnedSkill",
		"body": "GetLearnedSkill()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLearnedSkillLevel": {
		"prefix": "GetLearnedSkillLevel",
		"body": "GetLearnedSkillLevel()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLearningUnit": {
		"prefix": "GetLearningUnit",
		"body": "GetLearningUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLeavingUnit": {
		"prefix": "GetLeavingUnit",
		"body": "GetLeavingUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLevelingUnit": {
		"prefix": "GetLevelingUnit",
		"body": "GetLevelingUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLightningColorA": {
		"prefix": "GetLightningColorA",
		"body": "GetLightningColorA( ${1:whichBolt})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLightningColorB": {
		"prefix": "GetLightningColorB",
		"body": "GetLightningColorB( ${1:whichBolt})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLightningColorG": {
		"prefix": "GetLightningColorG",
		"body": "GetLightningColorG( ${1:whichBolt})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLightningColorR": {
		"prefix": "GetLightningColorR",
		"body": "GetLightningColorR( ${1:whichBolt})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLoadedUnit": {
		"prefix": "GetLoadedUnit",
		"body": "GetLoadedUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLocalizedHotkey": {
		"prefix": "GetLocalizedHotkey",
		"body": "GetLocalizedHotkey( ${1:source})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLocalizedString": {
		"prefix": "GetLocalizedString",
		"body": "GetLocalizedString( ${1:source})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLocalPlayer": {
		"prefix": "GetLocalPlayer",
		"body": "GetLocalPlayer()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLocationX": {
		"prefix": "GetLocationX",
		"body": "GetLocationX( ${1:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLocationY": {
		"prefix": "GetLocationY",
		"body": "GetLocationY( ${1:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetLocationZ": {
		"prefix": "GetLocationZ",
		"body": "GetLocationZ( ${1:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetManipulatedItem": {
		"prefix": "GetManipulatedItem",
		"body": "GetManipulatedItem()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetManipulatingUnit": {
		"prefix": "GetManipulatingUnit",
		"body": "GetManipulatingUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetObjectName": {
		"prefix": "GetObjectName",
		"body": "GetObjectName( ${1:objectId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetOrderedUnit": {
		"prefix": "GetOrderedUnit",
		"body": "GetOrderedUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetOrderPointLoc": {
		"prefix": "GetOrderPointLoc",
		"body": "GetOrderPointLoc()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetOrderPointX": {
		"prefix": "GetOrderPointX",
		"body": "GetOrderPointX()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetOrderPointY": {
		"prefix": "GetOrderPointY",
		"body": "GetOrderPointY()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetOrderTarget": {
		"prefix": "GetOrderTarget",
		"body": "GetOrderTarget()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetOrderTargetDestructable": {
		"prefix": "GetOrderTargetDestructable",
		"body": "GetOrderTargetDestructable()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetOrderTargetItem": {
		"prefix": "GetOrderTargetItem",
		"body": "GetOrderTargetItem()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetOrderTargetUnit": {
		"prefix": "GetOrderTargetUnit",
		"body": "GetOrderTargetUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetOwningPlayer": {
		"prefix": "GetOwningPlayer",
		"body": "GetOwningPlayer( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerAlliance": {
		"prefix": "GetPlayerAlliance",
		"body": "GetPlayerAlliance( ${1:sourcePlayer}, ${2:otherPlayer}, ${3:whichAllianceSetting})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerColor": {
		"prefix": "GetPlayerColor",
		"body": "GetPlayerColor( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerController": {
		"prefix": "GetPlayerController",
		"body": "GetPlayerController( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerHandicap": {
		"prefix": "GetPlayerHandicap",
		"body": "GetPlayerHandicap( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerHandicapXP": {
		"prefix": "GetPlayerHandicapXP",
		"body": "GetPlayerHandicapXP( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerId": {
		"prefix": "GetPlayerId",
		"body": "GetPlayerId( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerName": {
		"prefix": "GetPlayerName",
		"body": "GetPlayerName( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerRace": {
		"prefix": "GetPlayerRace",
		"body": "GetPlayerRace( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayers": {
		"prefix": "GetPlayers",
		"body": "GetPlayers()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerScore": {
		"prefix": "GetPlayerScore",
		"body": "GetPlayerScore( ${1:whichPlayer}, ${2:whichPlayerScore})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerSelectable": {
		"prefix": "GetPlayerSelectable",
		"body": "GetPlayerSelectable( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerSlotState": {
		"prefix": "GetPlayerSlotState",
		"body": "GetPlayerSlotState( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerStartLocation": {
		"prefix": "GetPlayerStartLocation",
		"body": "GetPlayerStartLocation( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerState": {
		"prefix": "GetPlayerState",
		"body": "GetPlayerState( ${1:whichPlayer}, ${2:whichPlayerState})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerStructureCount": {
		"prefix": "GetPlayerStructureCount",
		"body": "GetPlayerStructureCount( ${1:whichPlayer}, ${2:includeIncomplete})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerTaxRate": {
		"prefix": "GetPlayerTaxRate",
		"body": "GetPlayerTaxRate( ${1:sourcePlayer}, ${2:otherPlayer}, ${3:whichResource})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerTeam": {
		"prefix": "GetPlayerTeam",
		"body": "GetPlayerTeam( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerTechCount": {
		"prefix": "GetPlayerTechCount",
		"body": "GetPlayerTechCount( ${1:whichPlayer}, ${2:techid}, ${3:specificonly})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerTechMaxAllowed": {
		"prefix": "GetPlayerTechMaxAllowed",
		"body": "GetPlayerTechMaxAllowed( ${1:whichPlayer}, ${2:techid})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerTechResearched": {
		"prefix": "GetPlayerTechResearched",
		"body": "GetPlayerTechResearched( ${1:whichPlayer}, ${2:techid}, ${3:specificonly})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerTypedUnitCount": {
		"prefix": "GetPlayerTypedUnitCount",
		"body": "GetPlayerTypedUnitCount( ${1:whichPlayer}, ${2:unitName}, ${3:includeIncomplete}, ${4:includeUpgrades})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetPlayerUnitCount": {
		"prefix": "GetPlayerUnitCount",
		"body": "GetPlayerUnitCount( ${1:whichPlayer}, ${2:includeIncomplete})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetRandomInt": {
		"prefix": "GetRandomInt",
		"body": "GetRandomInt( ${1:lowBound}, ${2:highBound})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetRandomReal": {
		"prefix": "GetRandomReal",
		"body": "GetRandomReal( ${1:lowBound}, ${2:highBound})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetRectCenterX": {
		"prefix": "GetRectCenterX",
		"body": "GetRectCenterX( ${1:whichRect})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetRectCenterY": {
		"prefix": "GetRectCenterY",
		"body": "GetRectCenterY( ${1:whichRect})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetRectMaxX": {
		"prefix": "GetRectMaxX",
		"body": "GetRectMaxX( ${1:whichRect})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetRectMaxY": {
		"prefix": "GetRectMaxY",
		"body": "GetRectMaxY( ${1:whichRect})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetRectMinX": {
		"prefix": "GetRectMinX",
		"body": "GetRectMinX( ${1:whichRect})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetRectMinY": {
		"prefix": "GetRectMinY",
		"body": "GetRectMinY( ${1:whichRect})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetRescuer": {
		"prefix": "GetRescuer",
		"body": "GetRescuer()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetResearched": {
		"prefix": "GetResearched",
		"body": "GetResearched()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetResearchingUnit": {
		"prefix": "GetResearchingUnit",
		"body": "GetResearchingUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetResourceAmount": {
		"prefix": "GetResourceAmount",
		"body": "GetResourceAmount( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetResourceDensity": {
		"prefix": "GetResourceDensity",
		"body": "GetResourceDensity()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetRevivableUnit": {
		"prefix": "GetRevivableUnit",
		"body": "GetRevivableUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetRevivingUnit": {
		"prefix": "GetRevivingUnit",
		"body": "GetRevivingUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSaveBasicFilename": {
		"prefix": "GetSaveBasicFilename",
		"body": "GetSaveBasicFilename()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSellingUnit": {
		"prefix": "GetSellingUnit",
		"body": "GetSellingUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSoldItem": {
		"prefix": "GetSoldItem",
		"body": "GetSoldItem()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSoldUnit": {
		"prefix": "GetSoldUnit",
		"body": "GetSoldUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSoundDuration": {
		"prefix": "GetSoundDuration",
		"body": "GetSoundDuration( ${1:soundHandle})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSoundFileDuration": {
		"prefix": "GetSoundFileDuration",
		"body": "GetSoundFileDuration( ${1:musicFileName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSoundIsLoading": {
		"prefix": "GetSoundIsLoading",
		"body": "GetSoundIsLoading( ${1:soundHandle})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSoundIsPlaying": {
		"prefix": "GetSoundIsPlaying",
		"body": "GetSoundIsPlaying( ${1:soundHandle})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSpellAbility": {
		"prefix": "GetSpellAbility",
		"body": "GetSpellAbility()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSpellAbilityId": {
		"prefix": "GetSpellAbilityId",
		"body": "GetSpellAbilityId()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSpellAbilityUnit": {
		"prefix": "GetSpellAbilityUnit",
		"body": "GetSpellAbilityUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSpellTargetDestructable": {
		"prefix": "GetSpellTargetDestructable",
		"body": "GetSpellTargetDestructable()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSpellTargetItem": {
		"prefix": "GetSpellTargetItem",
		"body": "GetSpellTargetItem()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSpellTargetLoc": {
		"prefix": "GetSpellTargetLoc",
		"body": "GetSpellTargetLoc()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSpellTargetUnit": {
		"prefix": "GetSpellTargetUnit",
		"body": "GetSpellTargetUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSpellTargetX": {
		"prefix": "GetSpellTargetX",
		"body": "GetSpellTargetX()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSpellTargetY": {
		"prefix": "GetSpellTargetY",
		"body": "GetSpellTargetY()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetStartLocationLoc": {
		"prefix": "GetStartLocationLoc",
		"body": "GetStartLocationLoc( ${1:whichStartLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetStartLocationX": {
		"prefix": "GetStartLocationX",
		"body": "GetStartLocationX( ${1:whichStartLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetStartLocationY": {
		"prefix": "GetStartLocationY",
		"body": "GetStartLocationY( ${1:whichStartLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetStartLocPrio": {
		"prefix": "GetStartLocPrio",
		"body": "GetStartLocPrio( ${1:whichStartLoc}, ${2:prioSlotIndex})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetStartLocPrioSlot": {
		"prefix": "GetStartLocPrioSlot",
		"body": "GetStartLocPrioSlot( ${1:whichStartLoc}, ${2:prioSlotIndex})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetStoredBoolean": {
		"prefix": "GetStoredBoolean",
		"body": "GetStoredBoolean( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetStoredInteger": {
		"prefix": "GetStoredInteger",
		"body": "GetStoredInteger( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetStoredReal": {
		"prefix": "GetStoredReal",
		"body": "GetStoredReal( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetStoredString": {
		"prefix": "GetStoredString",
		"body": "GetStoredString( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSummonedUnit": {
		"prefix": "GetSummonedUnit",
		"body": "GetSummonedUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetSummoningUnit": {
		"prefix": "GetSummoningUnit",
		"body": "GetSummoningUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTeams": {
		"prefix": "GetTeams",
		"body": "GetTeams()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTerrainCliffLevel": {
		"prefix": "GetTerrainCliffLevel",
		"body": "GetTerrainCliffLevel( ${1:x}, ${2:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTerrainType": {
		"prefix": "GetTerrainType",
		"body": "GetTerrainType( ${1:x}, ${2:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTerrainVariance": {
		"prefix": "GetTerrainVariance",
		"body": "GetTerrainVariance( ${1:x}, ${2:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTimeOfDayScale": {
		"prefix": "GetTimeOfDayScale",
		"body": "GetTimeOfDayScale()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTournamentFinishNowPlayer": {
		"prefix": "GetTournamentFinishNowPlayer",
		"body": "GetTournamentFinishNowPlayer()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTournamentFinishNowRule": {
		"prefix": "GetTournamentFinishNowRule",
		"body": "GetTournamentFinishNowRule()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTournamentFinishSoonTimeRemaining": {
		"prefix": "GetTournamentFinishSoonTimeRemaining",
		"body": "GetTournamentFinishSoonTimeRemaining()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTournamentScore": {
		"prefix": "GetTournamentScore",
		"body": "GetTournamentScore( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTrainedUnit": {
		"prefix": "GetTrainedUnit",
		"body": "GetTrainedUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTrainedUnitType": {
		"prefix": "GetTrainedUnitType",
		"body": "GetTrainedUnitType()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTransportUnit": {
		"prefix": "GetTransportUnit",
		"body": "GetTransportUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTriggerDestructable": {
		"prefix": "GetTriggerDestructable",
		"body": "GetTriggerDestructable()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTriggerEvalCount": {
		"prefix": "GetTriggerEvalCount",
		"body": "GetTriggerEvalCount( ${1:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTriggerEventId": {
		"prefix": "GetTriggerEventId",
		"body": "GetTriggerEventId()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTriggerExecCount": {
		"prefix": "GetTriggerExecCount",
		"body": "GetTriggerExecCount( ${1:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTriggeringRegion": {
		"prefix": "GetTriggeringRegion",
		"body": "GetTriggeringRegion()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTriggeringTrackable": {
		"prefix": "GetTriggeringTrackable",
		"body": "GetTriggeringTrackable()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTriggeringTrigger": {
		"prefix": "GetTriggeringTrigger",
		"body": "GetTriggeringTrigger()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTriggerPlayer": {
		"prefix": "GetTriggerPlayer",
		"body": "GetTriggerPlayer()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTriggerUnit": {
		"prefix": "GetTriggerUnit",
		"body": "GetTriggerUnit()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetTriggerWidget": {
		"prefix": "GetTriggerWidget",
		"body": "GetTriggerWidget()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitAbilityLevel": {
		"prefix": "GetUnitAbilityLevel",
		"body": "GetUnitAbilityLevel( ${1:whichUnit}, ${2:abilcode})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitAcquireRange": {
		"prefix": "GetUnitAcquireRange",
		"body": "GetUnitAcquireRange( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitCurrentOrder": {
		"prefix": "GetUnitCurrentOrder",
		"body": "GetUnitCurrentOrder( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitDefaultAcquireRange": {
		"prefix": "GetUnitDefaultAcquireRange",
		"body": "GetUnitDefaultAcquireRange( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitDefaultFlyHeight": {
		"prefix": "GetUnitDefaultFlyHeight",
		"body": "GetUnitDefaultFlyHeight( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitDefaultMoveSpeed": {
		"prefix": "GetUnitDefaultMoveSpeed",
		"body": "GetUnitDefaultMoveSpeed( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitDefaultPropWindow": {
		"prefix": "GetUnitDefaultPropWindow",
		"body": "GetUnitDefaultPropWindow( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitDefaultTurnSpeed": {
		"prefix": "GetUnitDefaultTurnSpeed",
		"body": "GetUnitDefaultTurnSpeed( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitFacing": {
		"prefix": "GetUnitFacing",
		"body": "GetUnitFacing( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitFlyHeight": {
		"prefix": "GetUnitFlyHeight",
		"body": "GetUnitFlyHeight( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitFoodMade": {
		"prefix": "GetUnitFoodMade",
		"body": "GetUnitFoodMade( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitFoodUsed": {
		"prefix": "GetUnitFoodUsed",
		"body": "GetUnitFoodUsed( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitLevel": {
		"prefix": "GetUnitLevel",
		"body": "GetUnitLevel( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitLoc": {
		"prefix": "GetUnitLoc",
		"body": "GetUnitLoc( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitMoveSpeed": {
		"prefix": "GetUnitMoveSpeed",
		"body": "GetUnitMoveSpeed( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitName": {
		"prefix": "GetUnitName",
		"body": "GetUnitName( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitPointValue": {
		"prefix": "GetUnitPointValue",
		"body": "GetUnitPointValue( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitPointValueByType": {
		"prefix": "GetUnitPointValueByType",
		"body": "GetUnitPointValueByType( ${1:unitType})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitPropWindow": {
		"prefix": "GetUnitPropWindow",
		"body": "GetUnitPropWindow( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitRace": {
		"prefix": "GetUnitRace",
		"body": "GetUnitRace( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitRallyDestructable": {
		"prefix": "GetUnitRallyDestructable",
		"body": "GetUnitRallyDestructable( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitRallyPoint": {
		"prefix": "GetUnitRallyPoint",
		"body": "GetUnitRallyPoint( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitRallyUnit": {
		"prefix": "GetUnitRallyUnit",
		"body": "GetUnitRallyUnit( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitState": {
		"prefix": "GetUnitState",
		"body": "GetUnitState( ${1:whichUnit}, ${2:whichUnitState})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitTurnSpeed": {
		"prefix": "GetUnitTurnSpeed",
		"body": "GetUnitTurnSpeed( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitTypeId": {
		"prefix": "GetUnitTypeId",
		"body": "GetUnitTypeId( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitUserData": {
		"prefix": "GetUnitUserData",
		"body": "GetUnitUserData( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitX": {
		"prefix": "GetUnitX",
		"body": "GetUnitX( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetUnitY": {
		"prefix": "GetUnitY",
		"body": "GetUnitY( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetWidgetLife": {
		"prefix": "GetWidgetLife",
		"body": "GetWidgetLife( ${1:whichWidget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetWidgetX": {
		"prefix": "GetWidgetX",
		"body": "GetWidgetX( ${1:whichWidget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetWidgetY": {
		"prefix": "GetWidgetY",
		"body": "GetWidgetY( ${1:whichWidget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetWinningPlayer": {
		"prefix": "GetWinningPlayer",
		"body": "GetWinningPlayer()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GetWorldBounds": {
		"prefix": "GetWorldBounds",
		"body": "GetWorldBounds()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupAddUnit": {
		"prefix": "GroupAddUnit",
		"body": "GroupAddUnit( ${1:whichGroup}, ${2:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupClear": {
		"prefix": "GroupClear",
		"body": "GroupClear( ${1:whichGroup})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupEnumUnitsInRange": {
		"prefix": "GroupEnumUnitsInRange",
		"body": "GroupEnumUnitsInRange( ${1:whichGroup}, ${2:x}, ${3:y}, ${4:radius}, ${5:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupEnumUnitsInRangeCounted": {
		"prefix": "GroupEnumUnitsInRangeCounted",
		"body": "GroupEnumUnitsInRangeCounted( ${1:whichGroup}, ${2:x}, ${3:y}, ${4:radius}, ${5:filter}, ${6:countLimit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupEnumUnitsInRangeOfLoc": {
		"prefix": "GroupEnumUnitsInRangeOfLoc",
		"body": "GroupEnumUnitsInRangeOfLoc( ${1:whichGroup}, ${2:whichLocation}, ${3:radius}, ${4:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupEnumUnitsInRangeOfLocCounted": {
		"prefix": "GroupEnumUnitsInRangeOfLocCounted",
		"body": "GroupEnumUnitsInRangeOfLocCounted( ${1:whichGroup}, ${2:whichLocation}, ${3:radius}, ${4:filter}, ${5:countLimit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupEnumUnitsInRect": {
		"prefix": "GroupEnumUnitsInRect",
		"body": "GroupEnumUnitsInRect( ${1:whichGroup}, ${2:r}, ${3:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupEnumUnitsInRectCounted": {
		"prefix": "GroupEnumUnitsInRectCounted",
		"body": "GroupEnumUnitsInRectCounted( ${1:whichGroup}, ${2:r}, ${3:filter}, ${4:countLimit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupEnumUnitsOfPlayer": {
		"prefix": "GroupEnumUnitsOfPlayer",
		"body": "GroupEnumUnitsOfPlayer( ${1:whichGroup}, ${2:whichPlayer}, ${3:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupEnumUnitsOfType": {
		"prefix": "GroupEnumUnitsOfType",
		"body": "GroupEnumUnitsOfType( ${1:whichGroup}, ${2:unitname}, ${3:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupEnumUnitsOfTypeCounted": {
		"prefix": "GroupEnumUnitsOfTypeCounted",
		"body": "GroupEnumUnitsOfTypeCounted( ${1:whichGroup}, ${2:unitname}, ${3:filter}, ${4:countLimit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupEnumUnitsSelected": {
		"prefix": "GroupEnumUnitsSelected",
		"body": "GroupEnumUnitsSelected( ${1:whichGroup}, ${2:whichPlayer}, ${3:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupImmediateOrder": {
		"prefix": "GroupImmediateOrder",
		"body": "GroupImmediateOrder( ${1:whichGroup}, ${2:order})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupImmediateOrderById": {
		"prefix": "GroupImmediateOrderById",
		"body": "GroupImmediateOrderById( ${1:whichGroup}, ${2:order})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupPointOrder": {
		"prefix": "GroupPointOrder",
		"body": "GroupPointOrder( ${1:whichGroup}, ${2:order}, ${3:x}, ${4:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupPointOrderById": {
		"prefix": "GroupPointOrderById",
		"body": "GroupPointOrderById( ${1:whichGroup}, ${2:order}, ${3:x}, ${4:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupPointOrderByIdLoc": {
		"prefix": "GroupPointOrderByIdLoc",
		"body": "GroupPointOrderByIdLoc( ${1:whichGroup}, ${2:order}, ${3:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupPointOrderLoc": {
		"prefix": "GroupPointOrderLoc",
		"body": "GroupPointOrderLoc( ${1:whichGroup}, ${2:order}, ${3:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupRemoveUnit": {
		"prefix": "GroupRemoveUnit",
		"body": "GroupRemoveUnit( ${1:whichGroup}, ${2:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupTargetOrder": {
		"prefix": "GroupTargetOrder",
		"body": "GroupTargetOrder( ${1:whichGroup}, ${2:order}, ${3:targetWidget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"GroupTargetOrderById": {
		"prefix": "GroupTargetOrderById",
		"body": "GroupTargetOrderById( ${1:whichGroup}, ${2:order}, ${3:targetWidget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"HaveSavedBoolean": {
		"prefix": "HaveSavedBoolean",
		"body": "HaveSavedBoolean( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"HaveSavedHandle": {
		"prefix": "HaveSavedHandle",
		"body": "HaveSavedHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"HaveSavedInteger": {
		"prefix": "HaveSavedInteger",
		"body": "HaveSavedInteger( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"HaveSavedReal": {
		"prefix": "HaveSavedReal",
		"body": "HaveSavedReal( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"HaveSavedString": {
		"prefix": "HaveSavedString",
		"body": "HaveSavedString( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"HaveStoredBoolean": {
		"prefix": "HaveStoredBoolean",
		"body": "HaveStoredBoolean( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"HaveStoredInteger": {
		"prefix": "HaveStoredInteger",
		"body": "HaveStoredInteger( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"HaveStoredReal": {
		"prefix": "HaveStoredReal",
		"body": "HaveStoredReal( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"HaveStoredString": {
		"prefix": "HaveStoredString",
		"body": "HaveStoredString( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"HaveStoredUnit": {
		"prefix": "HaveStoredUnit",
		"body": "HaveStoredUnit( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"I2R": {
		"prefix": "I2R",
		"body": "I2R( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"I2S": {
		"prefix": "I2S",
		"body": "I2S( ${1:i})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IncUnitAbilityLevel": {
		"prefix": "IncUnitAbilityLevel",
		"body": "IncUnitAbilityLevel( ${1:whichUnit}, ${2:abilcode})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"InitGameCache": {
		"prefix": "InitGameCache",
		"body": "InitGameCache( ${1:campaignFile})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"InitHashtable": {
		"prefix": "InitHashtable",
		"body": "InitHashtable()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsCineFilterDisplayed": {
		"prefix": "IsCineFilterDisplayed",
		"body": "IsCineFilterDisplayed()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsDestructableInvulnerable": {
		"prefix": "IsDestructableInvulnerable",
		"body": "IsDestructableInvulnerable( ${1:d})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsFogEnabled": {
		"prefix": "IsFogEnabled",
		"body": "IsFogEnabled()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsFoggedToPlayer": {
		"prefix": "IsFoggedToPlayer",
		"body": "IsFoggedToPlayer( ${1:x}, ${2:y}, ${3:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsFogMaskEnabled": {
		"prefix": "IsFogMaskEnabled",
		"body": "IsFogMaskEnabled()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsGameTypeSupported": {
		"prefix": "IsGameTypeSupported",
		"body": "IsGameTypeSupported( ${1:whichGameType})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsHeroUnitId": {
		"prefix": "IsHeroUnitId",
		"body": "IsHeroUnitId( ${1:unitId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsItemIdPawnable": {
		"prefix": "IsItemIdPawnable",
		"body": "IsItemIdPawnable( ${1:itemId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsItemIdPowerup": {
		"prefix": "IsItemIdPowerup",
		"body": "IsItemIdPowerup( ${1:itemId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsItemIdSellable": {
		"prefix": "IsItemIdSellable",
		"body": "IsItemIdSellable( ${1:itemId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsItemInvulnerable": {
		"prefix": "IsItemInvulnerable",
		"body": "IsItemInvulnerable( ${1:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsItemOwned": {
		"prefix": "IsItemOwned",
		"body": "IsItemOwned( ${1:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsItemPawnable": {
		"prefix": "IsItemPawnable",
		"body": "IsItemPawnable( ${1:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsItemPowerup": {
		"prefix": "IsItemPowerup",
		"body": "IsItemPowerup( ${1:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsItemSellable": {
		"prefix": "IsItemSellable",
		"body": "IsItemSellable( ${1:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsItemVisible": {
		"prefix": "IsItemVisible",
		"body": "IsItemVisible( ${1:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsLeaderboardDisplayed": {
		"prefix": "IsLeaderboardDisplayed",
		"body": "IsLeaderboardDisplayed( ${1:lb})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsLocationFoggedToPlayer": {
		"prefix": "IsLocationFoggedToPlayer",
		"body": "IsLocationFoggedToPlayer( ${1:whichLocation}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsLocationInRegion": {
		"prefix": "IsLocationInRegion",
		"body": "IsLocationInRegion( ${1:whichRegion}, ${2:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsLocationMaskedToPlayer": {
		"prefix": "IsLocationMaskedToPlayer",
		"body": "IsLocationMaskedToPlayer( ${1:whichLocation}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsLocationVisibleToPlayer": {
		"prefix": "IsLocationVisibleToPlayer",
		"body": "IsLocationVisibleToPlayer( ${1:whichLocation}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsMapFlagSet": {
		"prefix": "IsMapFlagSet",
		"body": "IsMapFlagSet( ${1:whichMapFlag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsMaskedToPlayer": {
		"prefix": "IsMaskedToPlayer",
		"body": "IsMaskedToPlayer( ${1:x}, ${2:y}, ${3:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsMultiboardDisplayed": {
		"prefix": "IsMultiboardDisplayed",
		"body": "IsMultiboardDisplayed( ${1:lb})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsMultiboardMinimized": {
		"prefix": "IsMultiboardMinimized",
		"body": "IsMultiboardMinimized( ${1:lb})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsNoDefeatCheat": {
		"prefix": "IsNoDefeatCheat",
		"body": "IsNoDefeatCheat()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsNoVictoryCheat": {
		"prefix": "IsNoVictoryCheat",
		"body": "IsNoVictoryCheat()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsPlayerAlly": {
		"prefix": "IsPlayerAlly",
		"body": "IsPlayerAlly( ${1:whichPlayer}, ${2:otherPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsPlayerEnemy": {
		"prefix": "IsPlayerEnemy",
		"body": "IsPlayerEnemy( ${1:whichPlayer}, ${2:otherPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsPlayerInForce": {
		"prefix": "IsPlayerInForce",
		"body": "IsPlayerInForce( ${1:whichPlayer}, ${2:whichForce})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsPlayerObserver": {
		"prefix": "IsPlayerObserver",
		"body": "IsPlayerObserver( ${1:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsPlayerRacePrefSet": {
		"prefix": "IsPlayerRacePrefSet",
		"body": "IsPlayerRacePrefSet( ${1:whichPlayer}, ${2:pref})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsPointBlighted": {
		"prefix": "IsPointBlighted",
		"body": "IsPointBlighted( ${1:x}, ${2:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsPointInRegion": {
		"prefix": "IsPointInRegion",
		"body": "IsPointInRegion( ${1:whichRegion}, ${2:x}, ${3:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsQuestCompleted": {
		"prefix": "IsQuestCompleted",
		"body": "IsQuestCompleted( ${1:whichQuest})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsQuestDiscovered": {
		"prefix": "IsQuestDiscovered",
		"body": "IsQuestDiscovered( ${1:whichQuest})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsQuestEnabled": {
		"prefix": "IsQuestEnabled",
		"body": "IsQuestEnabled( ${1:whichQuest})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsQuestFailed": {
		"prefix": "IsQuestFailed",
		"body": "IsQuestFailed( ${1:whichQuest})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsQuestItemCompleted": {
		"prefix": "IsQuestItemCompleted",
		"body": "IsQuestItemCompleted( ${1:whichQuestItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsQuestRequired": {
		"prefix": "IsQuestRequired",
		"body": "IsQuestRequired( ${1:whichQuest})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueBuildOrder": {
		"prefix": "IssueBuildOrder",
		"body": "IssueBuildOrder( ${1:whichPeon}, ${2:unitToBuild}, ${3:x}, ${4:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueBuildOrderById": {
		"prefix": "IssueBuildOrderById",
		"body": "IssueBuildOrderById( ${1:whichPeon}, ${2:unitId}, ${3:x}, ${4:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueImmediateOrder": {
		"prefix": "IssueImmediateOrder",
		"body": "IssueImmediateOrder( ${1:whichUnit}, ${2:order})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueImmediateOrderById": {
		"prefix": "IssueImmediateOrderById",
		"body": "IssueImmediateOrderById( ${1:whichUnit}, ${2:order})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueInstantPointOrder": {
		"prefix": "IssueInstantPointOrder",
		"body": "IssueInstantPointOrder( ${1:whichUnit}, ${2:order}, ${3:x}, ${4:y}, ${5:instantTargetWidget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueInstantPointOrderById": {
		"prefix": "IssueInstantPointOrderById",
		"body": "IssueInstantPointOrderById( ${1:whichUnit}, ${2:order}, ${3:x}, ${4:y}, ${5:instantTargetWidget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueInstantTargetOrder": {
		"prefix": "IssueInstantTargetOrder",
		"body": "IssueInstantTargetOrder( ${1:whichUnit}, ${2:order}, ${3:targetWidget}, ${4:instantTargetWidget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueInstantTargetOrderById": {
		"prefix": "IssueInstantTargetOrderById",
		"body": "IssueInstantTargetOrderById( ${1:whichUnit}, ${2:order}, ${3:targetWidget}, ${4:instantTargetWidget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueNeutralImmediateOrder": {
		"prefix": "IssueNeutralImmediateOrder",
		"body": "IssueNeutralImmediateOrder( ${1:forWhichPlayer}, ${2:neutralStructure}, ${3:unitToBuild})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueNeutralImmediateOrderById": {
		"prefix": "IssueNeutralImmediateOrderById",
		"body": "IssueNeutralImmediateOrderById( ${1:forWhichPlayer,unit}, ${2:integer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueNeutralPointOrder": {
		"prefix": "IssueNeutralPointOrder",
		"body": "IssueNeutralPointOrder( ${1:forWhichPlayer,unit}, ${2:string}, ${3:real}, ${4:real})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueNeutralPointOrderById": {
		"prefix": "IssueNeutralPointOrderById",
		"body": "IssueNeutralPointOrderById( ${1:forWhichPlayer,unit}, ${2:integer}, ${3:real}, ${4:real})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueNeutralTargetOrder": {
		"prefix": "IssueNeutralTargetOrder",
		"body": "IssueNeutralTargetOrder( ${1:forWhichPlayer,unit}, ${2:string}, ${3:widget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueNeutralTargetOrderById": {
		"prefix": "IssueNeutralTargetOrderById",
		"body": "IssueNeutralTargetOrderById( ${1:forWhichPlayer,unit}, ${2:integer}, ${3:widget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssuePointOrder": {
		"prefix": "IssuePointOrder",
		"body": "IssuePointOrder( ${1:whichUnit}, ${2:order}, ${3:x}, ${4:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssuePointOrderById": {
		"prefix": "IssuePointOrderById",
		"body": "IssuePointOrderById( ${1:whichUnit}, ${2:order}, ${3:x}, ${4:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssuePointOrderByIdLoc": {
		"prefix": "IssuePointOrderByIdLoc",
		"body": "IssuePointOrderByIdLoc( ${1:whichUnit}, ${2:order}, ${3:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssuePointOrderLoc": {
		"prefix": "IssuePointOrderLoc",
		"body": "IssuePointOrderLoc( ${1:whichUnit}, ${2:order}, ${3:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueTargetOrder": {
		"prefix": "IssueTargetOrder",
		"body": "IssueTargetOrder( ${1:whichUnit}, ${2:order}, ${3:targetWidget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IssueTargetOrderById": {
		"prefix": "IssueTargetOrderById",
		"body": "IssueTargetOrderById( ${1:whichUnit}, ${2:order}, ${3:targetWidget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsSuspendedXP": {
		"prefix": "IsSuspendedXP",
		"body": "IsSuspendedXP( ${1:whichHero})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsTerrainPathable": {
		"prefix": "IsTerrainPathable",
		"body": "IsTerrainPathable( ${1:x}, ${2:y}, ${3:t})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsTimerDialogDisplayed": {
		"prefix": "IsTimerDialogDisplayed",
		"body": "IsTimerDialogDisplayed( ${1:whichDialog})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsTriggerEnabled": {
		"prefix": "IsTriggerEnabled",
		"body": "IsTriggerEnabled( ${1:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsTriggerWaitOnSleeps": {
		"prefix": "IsTriggerWaitOnSleeps",
		"body": "IsTriggerWaitOnSleeps( ${1:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnit": {
		"prefix": "IsUnit",
		"body": "IsUnit( ${1:whichUnit}, ${2:whichSpecifiedUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitAlly": {
		"prefix": "IsUnitAlly",
		"body": "IsUnitAlly( ${1:whichUnit}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitDetected": {
		"prefix": "IsUnitDetected",
		"body": "IsUnitDetected( ${1:whichUnit}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitEnemy": {
		"prefix": "IsUnitEnemy",
		"body": "IsUnitEnemy( ${1:whichUnit}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitFogged": {
		"prefix": "IsUnitFogged",
		"body": "IsUnitFogged( ${1:whichUnit}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitHidden": {
		"prefix": "IsUnitHidden",
		"body": "IsUnitHidden( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitIdType": {
		"prefix": "IsUnitIdType",
		"body": "IsUnitIdType( ${1:unitId}, ${2:whichUnitType})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitIllusion": {
		"prefix": "IsUnitIllusion",
		"body": "IsUnitIllusion( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitInForce": {
		"prefix": "IsUnitInForce",
		"body": "IsUnitInForce( ${1:whichUnit}, ${2:whichForce})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitInGroup": {
		"prefix": "IsUnitInGroup",
		"body": "IsUnitInGroup( ${1:whichUnit}, ${2:whichGroup})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitInRange": {
		"prefix": "IsUnitInRange",
		"body": "IsUnitInRange( ${1:whichUnit}, ${2:otherUnit}, ${3:distance})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitInRangeLoc": {
		"prefix": "IsUnitInRangeLoc",
		"body": "IsUnitInRangeLoc( ${1:whichUnit}, ${2:whichLocation}, ${3:distance})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitInRangeXY": {
		"prefix": "IsUnitInRangeXY",
		"body": "IsUnitInRangeXY( ${1:whichUnit}, ${2:x}, ${3:y}, ${4:distance})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitInRegion": {
		"prefix": "IsUnitInRegion",
		"body": "IsUnitInRegion( ${1:whichRegion}, ${2:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitInTransport": {
		"prefix": "IsUnitInTransport",
		"body": "IsUnitInTransport( ${1:whichUnit}, ${2:whichTransport})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitInvisible": {
		"prefix": "IsUnitInvisible",
		"body": "IsUnitInvisible( ${1:whichUnit}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitLoaded": {
		"prefix": "IsUnitLoaded",
		"body": "IsUnitLoaded( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitMasked": {
		"prefix": "IsUnitMasked",
		"body": "IsUnitMasked( ${1:whichUnit}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitOwnedByPlayer": {
		"prefix": "IsUnitOwnedByPlayer",
		"body": "IsUnitOwnedByPlayer( ${1:whichUnit}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitPaused": {
		"prefix": "IsUnitPaused",
		"body": "IsUnitPaused( ${1:whichHero})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitRace": {
		"prefix": "IsUnitRace",
		"body": "IsUnitRace( ${1:whichUnit}, ${2:whichRace})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitSelected": {
		"prefix": "IsUnitSelected",
		"body": "IsUnitSelected( ${1:whichUnit}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitType": {
		"prefix": "IsUnitType",
		"body": "IsUnitType( ${1:whichUnit}, ${2:whichUnitType})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsUnitVisible": {
		"prefix": "IsUnitVisible",
		"body": "IsUnitVisible( ${1:whichUnit}, ${2:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"IsVisibleToPlayer": {
		"prefix": "IsVisibleToPlayer",
		"body": "IsVisibleToPlayer( ${1:x}, ${2:y}, ${3:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ItemPoolAddItemType": {
		"prefix": "ItemPoolAddItemType",
		"body": "ItemPoolAddItemType( ${1:whichItemPool}, ${2:itemId}, ${3:weight})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ItemPoolRemoveItemType": {
		"prefix": "ItemPoolRemoveItemType",
		"body": "ItemPoolRemoveItemType( ${1:whichItemPool}, ${2:itemId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"KillDestructable": {
		"prefix": "KillDestructable",
		"body": "KillDestructable( ${1:d})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"KillSoundWhenDone": {
		"prefix": "KillSoundWhenDone",
		"body": "KillSoundWhenDone( ${1:soundHandle})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"KillUnit": {
		"prefix": "KillUnit",
		"body": "KillUnit( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardAddItem": {
		"prefix": "LeaderboardAddItem",
		"body": "LeaderboardAddItem( ${1:lb}, ${2:label}, ${3:value}, ${4:p})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardClear": {
		"prefix": "LeaderboardClear",
		"body": "LeaderboardClear( ${1:lb})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardDisplay": {
		"prefix": "LeaderboardDisplay",
		"body": "LeaderboardDisplay( ${1:lb}, ${2:show})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardGetItemCount": {
		"prefix": "LeaderboardGetItemCount",
		"body": "LeaderboardGetItemCount( ${1:lb})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardGetLabelText": {
		"prefix": "LeaderboardGetLabelText",
		"body": "LeaderboardGetLabelText( ${1:lb})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardGetPlayerIndex": {
		"prefix": "LeaderboardGetPlayerIndex",
		"body": "LeaderboardGetPlayerIndex( ${1:lb}, ${2:p})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardHasPlayerItem": {
		"prefix": "LeaderboardHasPlayerItem",
		"body": "LeaderboardHasPlayerItem( ${1:lb}, ${2:p})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardRemoveItem": {
		"prefix": "LeaderboardRemoveItem",
		"body": "LeaderboardRemoveItem( ${1:lb}, ${2:index})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardRemovePlayerItem": {
		"prefix": "LeaderboardRemovePlayerItem",
		"body": "LeaderboardRemovePlayerItem( ${1:lb}, ${2:p})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardSetItemLabel": {
		"prefix": "LeaderboardSetItemLabel",
		"body": "LeaderboardSetItemLabel( ${1:lb}, ${2:whichItem}, ${3:val})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardSetItemLabelColor": {
		"prefix": "LeaderboardSetItemLabelColor",
		"body": "LeaderboardSetItemLabelColor( ${1:lb}, ${2:whichItem}, ${3:red}, ${4:green}, ${5:blue}, ${6:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardSetItemStyle": {
		"prefix": "LeaderboardSetItemStyle",
		"body": "LeaderboardSetItemStyle( ${1:lb}, ${2:whichItem}, ${3:showLabel}, ${4:showValue}, ${5:showIcon})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardSetItemValue": {
		"prefix": "LeaderboardSetItemValue",
		"body": "LeaderboardSetItemValue( ${1:lb}, ${2:whichItem}, ${3:val})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardSetItemValueColor": {
		"prefix": "LeaderboardSetItemValueColor",
		"body": "LeaderboardSetItemValueColor( ${1:lb}, ${2:whichItem}, ${3:red}, ${4:green}, ${5:blue}, ${6:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardSetLabel": {
		"prefix": "LeaderboardSetLabel",
		"body": "LeaderboardSetLabel( ${1:lb}, ${2:label})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardSetLabelColor": {
		"prefix": "LeaderboardSetLabelColor",
		"body": "LeaderboardSetLabelColor( ${1:lb}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardSetSizeByItemCount": {
		"prefix": "LeaderboardSetSizeByItemCount",
		"body": "LeaderboardSetSizeByItemCount( ${1:lb}, ${2:count})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardSetStyle": {
		"prefix": "LeaderboardSetStyle",
		"body": "LeaderboardSetStyle( ${1:lb}, ${2:showLabel}, ${3:showNames}, ${4:showValues}, ${5:showIcons})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardSetValueColor": {
		"prefix": "LeaderboardSetValueColor",
		"body": "LeaderboardSetValueColor( ${1:lb}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardSortItemsByLabel": {
		"prefix": "LeaderboardSortItemsByLabel",
		"body": "LeaderboardSortItemsByLabel( ${1:lb}, ${2:ascending})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardSortItemsByPlayer": {
		"prefix": "LeaderboardSortItemsByPlayer",
		"body": "LeaderboardSortItemsByPlayer( ${1:lb}, ${2:ascending})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LeaderboardSortItemsByValue": {
		"prefix": "LeaderboardSortItemsByValue",
		"body": "LeaderboardSortItemsByValue( ${1:lb}, ${2:ascending})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadAbilityHandle": {
		"prefix": "LoadAbilityHandle",
		"body": "LoadAbilityHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadBoolean": {
		"prefix": "LoadBoolean",
		"body": "LoadBoolean( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadBooleanExprHandle": {
		"prefix": "LoadBooleanExprHandle",
		"body": "LoadBooleanExprHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadButtonHandle": {
		"prefix": "LoadButtonHandle",
		"body": "LoadButtonHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadDefeatConditionHandle": {
		"prefix": "LoadDefeatConditionHandle",
		"body": "LoadDefeatConditionHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadDestructableHandle": {
		"prefix": "LoadDestructableHandle",
		"body": "LoadDestructableHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadDialogHandle": {
		"prefix": "LoadDialogHandle",
		"body": "LoadDialogHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadEffectHandle": {
		"prefix": "LoadEffectHandle",
		"body": "LoadEffectHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadFogModifierHandle": {
		"prefix": "LoadFogModifierHandle",
		"body": "LoadFogModifierHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadFogStateHandle": {
		"prefix": "LoadFogStateHandle",
		"body": "LoadFogStateHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadForceHandle": {
		"prefix": "LoadForceHandle",
		"body": "LoadForceHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadGame": {
		"prefix": "LoadGame",
		"body": "LoadGame( ${1:saveFileName}, ${2:doScoreScreen})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadGroupHandle": {
		"prefix": "LoadGroupHandle",
		"body": "LoadGroupHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadHashtableHandle": {
		"prefix": "LoadHashtableHandle",
		"body": "LoadHashtableHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadImageHandle": {
		"prefix": "LoadImageHandle",
		"body": "LoadImageHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadInteger": {
		"prefix": "LoadInteger",
		"body": "LoadInteger( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadItemHandle": {
		"prefix": "LoadItemHandle",
		"body": "LoadItemHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadItemPoolHandle": {
		"prefix": "LoadItemPoolHandle",
		"body": "LoadItemPoolHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadLeaderboardHandle": {
		"prefix": "LoadLeaderboardHandle",
		"body": "LoadLeaderboardHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadLightningHandle": {
		"prefix": "LoadLightningHandle",
		"body": "LoadLightningHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadLocationHandle": {
		"prefix": "LoadLocationHandle",
		"body": "LoadLocationHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadMultiboardHandle": {
		"prefix": "LoadMultiboardHandle",
		"body": "LoadMultiboardHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadMultiboardItemHandle": {
		"prefix": "LoadMultiboardItemHandle",
		"body": "LoadMultiboardItemHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadPlayerHandle": {
		"prefix": "LoadPlayerHandle",
		"body": "LoadPlayerHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadQuestHandle": {
		"prefix": "LoadQuestHandle",
		"body": "LoadQuestHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadQuestItemHandle": {
		"prefix": "LoadQuestItemHandle",
		"body": "LoadQuestItemHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadReal": {
		"prefix": "LoadReal",
		"body": "LoadReal( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadRectHandle": {
		"prefix": "LoadRectHandle",
		"body": "LoadRectHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadRegionHandle": {
		"prefix": "LoadRegionHandle",
		"body": "LoadRegionHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadSoundHandle": {
		"prefix": "LoadSoundHandle",
		"body": "LoadSoundHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadStr": {
		"prefix": "LoadStr",
		"body": "LoadStr( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadTextTagHandle": {
		"prefix": "LoadTextTagHandle",
		"body": "LoadTextTagHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadTimerDialogHandle": {
		"prefix": "LoadTimerDialogHandle",
		"body": "LoadTimerDialogHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadTimerHandle": {
		"prefix": "LoadTimerHandle",
		"body": "LoadTimerHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadTrackableHandle": {
		"prefix": "LoadTrackableHandle",
		"body": "LoadTrackableHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadTriggerActionHandle": {
		"prefix": "LoadTriggerActionHandle",
		"body": "LoadTriggerActionHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadTriggerConditionHandle": {
		"prefix": "LoadTriggerConditionHandle",
		"body": "LoadTriggerConditionHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadTriggerEventHandle": {
		"prefix": "LoadTriggerEventHandle",
		"body": "LoadTriggerEventHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadTriggerHandle": {
		"prefix": "LoadTriggerHandle",
		"body": "LoadTriggerHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadUbersplatHandle": {
		"prefix": "LoadUbersplatHandle",
		"body": "LoadUbersplatHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadUnitHandle": {
		"prefix": "LoadUnitHandle",
		"body": "LoadUnitHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadUnitPoolHandle": {
		"prefix": "LoadUnitPoolHandle",
		"body": "LoadUnitPoolHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"LoadWidgetHandle": {
		"prefix": "LoadWidgetHandle",
		"body": "LoadWidgetHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Location": {
		"prefix": "Location",
		"body": "Location( ${1:x}, ${2:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MoveLightning": {
		"prefix": "MoveLightning",
		"body": "MoveLightning( ${1:whichBolt}, ${2:checkVisibility}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MoveLightningEx": {
		"prefix": "MoveLightningEx",
		"body": "MoveLightningEx( ${1:whichBolt}, ${2:checkVisibility}, ${3:x1}, ${4:y1}, ${5:z1}, ${6:x2}, ${7:y2}, ${8:z2})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MoveLocation": {
		"prefix": "MoveLocation",
		"body": "MoveLocation( ${1:whichLocation}, ${2:newX}, ${3:newY})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MoveRectTo": {
		"prefix": "MoveRectTo",
		"body": "MoveRectTo( ${1:whichRect}, ${2:newCenterX}, ${3:newCenterY})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MoveRectToLoc": {
		"prefix": "MoveRectToLoc",
		"body": "MoveRectToLoc( ${1:whichRect}, ${2:newCenterLoc})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardClear": {
		"prefix": "MultiboardClear",
		"body": "MultiboardClear( ${1:lb})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardDisplay": {
		"prefix": "MultiboardDisplay",
		"body": "MultiboardDisplay( ${1:lb}, ${2:show})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardGetColumnCount": {
		"prefix": "MultiboardGetColumnCount",
		"body": "MultiboardGetColumnCount( ${1:lb})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardGetItem": {
		"prefix": "MultiboardGetItem",
		"body": "MultiboardGetItem( ${1:lb}, ${2:row}, ${3:column})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardGetRowCount": {
		"prefix": "MultiboardGetRowCount",
		"body": "MultiboardGetRowCount( ${1:lb})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardGetTitleText": {
		"prefix": "MultiboardGetTitleText",
		"body": "MultiboardGetTitleText( ${1:lb})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardMinimize": {
		"prefix": "MultiboardMinimize",
		"body": "MultiboardMinimize( ${1:lb}, ${2:minimize})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardReleaseItem": {
		"prefix": "MultiboardReleaseItem",
		"body": "MultiboardReleaseItem( ${1:mbi})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetColumnCount": {
		"prefix": "MultiboardSetColumnCount",
		"body": "MultiboardSetColumnCount( ${1:lb}, ${2:count})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetItemIcon": {
		"prefix": "MultiboardSetItemIcon",
		"body": "MultiboardSetItemIcon( ${1:mbi}, ${2:iconFileName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetItemsIcon": {
		"prefix": "MultiboardSetItemsIcon",
		"body": "MultiboardSetItemsIcon( ${1:lb}, ${2:iconPath})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetItemsStyle": {
		"prefix": "MultiboardSetItemsStyle",
		"body": "MultiboardSetItemsStyle( ${1:lb}, ${2:showValues}, ${3:showIcons})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetItemStyle": {
		"prefix": "MultiboardSetItemStyle",
		"body": "MultiboardSetItemStyle( ${1:mbi}, ${2:showValue}, ${3:showIcon})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetItemsValue": {
		"prefix": "MultiboardSetItemsValue",
		"body": "MultiboardSetItemsValue( ${1:lb}, ${2:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetItemsValueColor": {
		"prefix": "MultiboardSetItemsValueColor",
		"body": "MultiboardSetItemsValueColor( ${1:lb}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetItemsWidth": {
		"prefix": "MultiboardSetItemsWidth",
		"body": "MultiboardSetItemsWidth( ${1:lb}, ${2:width})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetItemValue": {
		"prefix": "MultiboardSetItemValue",
		"body": "MultiboardSetItemValue( ${1:mbi}, ${2:val})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetItemValueColor": {
		"prefix": "MultiboardSetItemValueColor",
		"body": "MultiboardSetItemValueColor( ${1:mbi}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetItemWidth": {
		"prefix": "MultiboardSetItemWidth",
		"body": "MultiboardSetItemWidth( ${1:mbi}, ${2:width})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetRowCount": {
		"prefix": "MultiboardSetRowCount",
		"body": "MultiboardSetRowCount( ${1:lb}, ${2:count})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetTitleText": {
		"prefix": "MultiboardSetTitleText",
		"body": "MultiboardSetTitleText( ${1:lb}, ${2:label})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSetTitleTextColor": {
		"prefix": "MultiboardSetTitleTextColor",
		"body": "MultiboardSetTitleTextColor( ${1:lb}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"MultiboardSuppressDisplay": {
		"prefix": "MultiboardSuppressDisplay",
		"body": "MultiboardSuppressDisplay( ${1:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"NewSoundEnvironment": {
		"prefix": "NewSoundEnvironment",
		"body": "NewSoundEnvironment( ${1:environmentName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Not": {
		"prefix": "Not",
		"body": "Not( ${1:operand})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Or": {
		"prefix": "Or",
		"body": "Or( ${1:operandA}, ${2:operandB})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"OrderId": {
		"prefix": "OrderId",
		"body": "OrderId( ${1:orderIdString})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"OrderId2String": {
		"prefix": "OrderId2String",
		"body": "OrderId2String( ${1:orderId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PanCameraTo": {
		"prefix": "PanCameraTo",
		"body": "PanCameraTo( ${1:x}, ${2:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PanCameraToTimed": {
		"prefix": "PanCameraToTimed",
		"body": "PanCameraToTimed( ${1:x}, ${2:y}, ${3:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PanCameraToTimedWithZ": {
		"prefix": "PanCameraToTimedWithZ",
		"body": "PanCameraToTimedWithZ( ${1:x}, ${2:y}, ${3:zOffsetDest}, ${4:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PanCameraToWithZ": {
		"prefix": "PanCameraToWithZ",
		"body": "PanCameraToWithZ( ${1:x}, ${2:y}, ${3:zOffsetDest})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PauseCompAI": {
		"prefix": "PauseCompAI",
		"body": "PauseCompAI( ${1:p}, ${2:pause})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PauseGame": {
		"prefix": "PauseGame",
		"body": "PauseGame( ${1:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PauseTimer": {
		"prefix": "PauseTimer",
		"body": "PauseTimer( ${1:whichTimer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PauseUnit": {
		"prefix": "PauseUnit",
		"body": "PauseUnit( ${1:whichUnit}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PingMinimap": {
		"prefix": "PingMinimap",
		"body": "PingMinimap( ${1:x}, ${2:y}, ${3:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PingMinimapEx": {
		"prefix": "PingMinimapEx",
		"body": "PingMinimapEx( ${1:x}, ${2:y}, ${3:duration}, ${4:red}, ${5:green}, ${6:blue}, ${7:extraEffects})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PlaceRandomItem": {
		"prefix": "PlaceRandomItem",
		"body": "PlaceRandomItem( ${1:whichItemPool}, ${2:x}, ${3:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PlaceRandomUnit": {
		"prefix": "PlaceRandomUnit",
		"body": "PlaceRandomUnit( ${1:whichPool}, ${2:forWhichPlayer}, ${3:x}, ${4:y}, ${5:facing})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PlayCinematic": {
		"prefix": "PlayCinematic",
		"body": "PlayCinematic( ${1:movieName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Player": {
		"prefix": "Player",
		"body": "Player( ${1:number})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PlayerGetLeaderboard": {
		"prefix": "PlayerGetLeaderboard",
		"body": "PlayerGetLeaderboard( ${1:toPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PlayerSetLeaderboard": {
		"prefix": "PlayerSetLeaderboard",
		"body": "PlayerSetLeaderboard( ${1:toPlayer}, ${2:lb})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PlayModelCinematic": {
		"prefix": "PlayModelCinematic",
		"body": "PlayModelCinematic( ${1:modelName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PlayMusic": {
		"prefix": "PlayMusic",
		"body": "PlayMusic( ${1:musicName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PlayMusicEx": {
		"prefix": "PlayMusicEx",
		"body": "PlayMusicEx( ${1:musicName}, ${2:frommsecs}, ${3:fadeinmsecs})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PlayThematicMusic": {
		"prefix": "PlayThematicMusic",
		"body": "PlayThematicMusic( ${1:musicFileName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PlayThematicMusicEx": {
		"prefix": "PlayThematicMusicEx",
		"body": "PlayThematicMusicEx( ${1:musicFileName}, ${2:frommsecs})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Pow": {
		"prefix": "Pow",
		"body": "Pow( ${1:x}, ${2:power})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Preload": {
		"prefix": "Preload",
		"body": "Preload( ${1:filename})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PreloadEnd": {
		"prefix": "PreloadEnd",
		"body": "PreloadEnd( ${1:timeout})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PreloadEndEx": {
		"prefix": "PreloadEndEx",
		"body": "PreloadEndEx()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Preloader": {
		"prefix": "Preloader",
		"body": "Preloader( ${1:filename})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PreloadGenClear": {
		"prefix": "PreloadGenClear",
		"body": "PreloadGenClear()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PreloadGenEnd": {
		"prefix": "PreloadGenEnd",
		"body": "PreloadGenEnd( ${1:filename})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PreloadGenStart": {
		"prefix": "PreloadGenStart",
		"body": "PreloadGenStart()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PreloadRefresh": {
		"prefix": "PreloadRefresh",
		"body": "PreloadRefresh()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"PreloadStart": {
		"prefix": "PreloadStart",
		"body": "PreloadStart()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"QuestCreateItem": {
		"prefix": "QuestCreateItem",
		"body": "QuestCreateItem( ${1:whichQuest})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"QuestItemSetCompleted": {
		"prefix": "QuestItemSetCompleted",
		"body": "QuestItemSetCompleted( ${1:whichQuestItem}, ${2:completed})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"QuestItemSetDescription": {
		"prefix": "QuestItemSetDescription",
		"body": "QuestItemSetDescription( ${1:whichQuestItem}, ${2:description})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"QuestSetCompleted": {
		"prefix": "QuestSetCompleted",
		"body": "QuestSetCompleted( ${1:whichQuest}, ${2:completed})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"QuestSetDescription": {
		"prefix": "QuestSetDescription",
		"body": "QuestSetDescription( ${1:whichQuest}, ${2:description})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"QuestSetDiscovered": {
		"prefix": "QuestSetDiscovered",
		"body": "QuestSetDiscovered( ${1:whichQuest}, ${2:discovered})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"QuestSetEnabled": {
		"prefix": "QuestSetEnabled",
		"body": "QuestSetEnabled( ${1:whichQuest}, ${2:enabled})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"QuestSetFailed": {
		"prefix": "QuestSetFailed",
		"body": "QuestSetFailed( ${1:whichQuest}, ${2:failed})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"QuestSetIconPath": {
		"prefix": "QuestSetIconPath",
		"body": "QuestSetIconPath( ${1:whichQuest}, ${2:iconPath})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"QuestSetRequired": {
		"prefix": "QuestSetRequired",
		"body": "QuestSetRequired( ${1:whichQuest}, ${2:required})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"QuestSetTitle": {
		"prefix": "QuestSetTitle",
		"body": "QuestSetTitle( ${1:whichQuest}, ${2:title})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"QueueDestructableAnimation": {
		"prefix": "QueueDestructableAnimation",
		"body": "QueueDestructableAnimation( ${1:d}, ${2:whichAnimation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"QueueUnitAnimation": {
		"prefix": "QueueUnitAnimation",
		"body": "QueueUnitAnimation( ${1:whichUnit}, ${2:whichAnimation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"R2I": {
		"prefix": "R2I",
		"body": "R2I( ${1:r})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"R2S": {
		"prefix": "R2S",
		"body": "R2S( ${1:r})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"R2SW": {
		"prefix": "R2SW",
		"body": "R2SW( ${1:r}, ${2:width}, ${3:precision})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Rad2Deg": {
		"prefix": "Rad2Deg",
		"body": "Rad2Deg( ${1:radians})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Rect": {
		"prefix": "Rect",
		"body": "Rect( ${1:minx}, ${2:miny}, ${3:maxx}, ${4:maxy})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RectFromLoc": {
		"prefix": "RectFromLoc",
		"body": "RectFromLoc( ${1:min}, ${2:max})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RecycleGuardPosition": {
		"prefix": "RecycleGuardPosition",
		"body": "RecycleGuardPosition( ${1:hUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RegionAddCell": {
		"prefix": "RegionAddCell",
		"body": "RegionAddCell( ${1:whichRegion}, ${2:x}, ${3:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RegionAddCellAtLoc": {
		"prefix": "RegionAddCellAtLoc",
		"body": "RegionAddCellAtLoc( ${1:whichRegion}, ${2:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RegionAddRect": {
		"prefix": "RegionAddRect",
		"body": "RegionAddRect( ${1:whichRegion}, ${2:r})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RegionClearCell": {
		"prefix": "RegionClearCell",
		"body": "RegionClearCell( ${1:whichRegion}, ${2:x}, ${3:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RegionClearCellAtLoc": {
		"prefix": "RegionClearCellAtLoc",
		"body": "RegionClearCellAtLoc( ${1:whichRegion}, ${2:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RegionClearRect": {
		"prefix": "RegionClearRect",
		"body": "RegionClearRect( ${1:whichRegion}, ${2:r})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RegisterStackedSound": {
		"prefix": "RegisterStackedSound",
		"body": "RegisterStackedSound( ${1:soundHandle}, ${2:byPosition}, ${3:rectwidth}, ${4:rectheight})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ReloadGame": {
		"prefix": "ReloadGame",
		"body": "ReloadGame()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ReloadGameCachesFromDisk": {
		"prefix": "ReloadGameCachesFromDisk",
		"body": "ReloadGameCachesFromDisk()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveAllGuardPositions": {
		"prefix": "RemoveAllGuardPositions",
		"body": "RemoveAllGuardPositions( ${1:num})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveDestructable": {
		"prefix": "RemoveDestructable",
		"body": "RemoveDestructable( ${1:d})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveGuardPosition": {
		"prefix": "RemoveGuardPosition",
		"body": "RemoveGuardPosition( ${1:hUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveItem": {
		"prefix": "RemoveItem",
		"body": "RemoveItem( ${1:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveItemFromAllStock": {
		"prefix": "RemoveItemFromAllStock",
		"body": "RemoveItemFromAllStock( ${1:itemId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveItemFromStock": {
		"prefix": "RemoveItemFromStock",
		"body": "RemoveItemFromStock( ${1:whichUnit}, ${2:itemId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveLocation": {
		"prefix": "RemoveLocation",
		"body": "RemoveLocation( ${1:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemovePlayer": {
		"prefix": "RemovePlayer",
		"body": "RemovePlayer( ${1:whichPlayer}, ${2:gameResult})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveRect": {
		"prefix": "RemoveRect",
		"body": "RemoveRect( ${1:whichRect})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveRegion": {
		"prefix": "RemoveRegion",
		"body": "RemoveRegion( ${1:whichRegion})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveSavedBoolean": {
		"prefix": "RemoveSavedBoolean",
		"body": "RemoveSavedBoolean( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveSavedHandle": {
		"prefix": "RemoveSavedHandle",
		"body": "RemoveSavedHandle( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveSavedInteger": {
		"prefix": "RemoveSavedInteger",
		"body": "RemoveSavedInteger( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveSaveDirectory": {
		"prefix": "RemoveSaveDirectory",
		"body": "RemoveSaveDirectory( ${1:sourceDirName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveSavedReal": {
		"prefix": "RemoveSavedReal",
		"body": "RemoveSavedReal( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveSavedString": {
		"prefix": "RemoveSavedString",
		"body": "RemoveSavedString( ${1:table}, ${2:parentKey}, ${3:childKey})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveUnit": {
		"prefix": "RemoveUnit",
		"body": "RemoveUnit( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveUnitFromAllStock": {
		"prefix": "RemoveUnitFromAllStock",
		"body": "RemoveUnitFromAllStock( ${1:unitId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveUnitFromStock": {
		"prefix": "RemoveUnitFromStock",
		"body": "RemoveUnitFromStock( ${1:whichUnit}, ${2:unitId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RemoveWeatherEffect": {
		"prefix": "RemoveWeatherEffect",
		"body": "RemoveWeatherEffect( ${1:whichEffect})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RenameSaveDirectory": {
		"prefix": "RenameSaveDirectory",
		"body": "RenameSaveDirectory( ${1:sourceDirName}, ${2:destDirName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ResetTerrainFog": {
		"prefix": "ResetTerrainFog",
		"body": "ResetTerrainFog()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ResetToGameCamera": {
		"prefix": "ResetToGameCamera",
		"body": "ResetToGameCamera( ${1:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ResetTrigger": {
		"prefix": "ResetTrigger",
		"body": "ResetTrigger( ${1:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ResetUbersplat": {
		"prefix": "ResetUbersplat",
		"body": "ResetUbersplat( ${1:whichSplat})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ResetUnitLookAt": {
		"prefix": "ResetUnitLookAt",
		"body": "ResetUnitLookAt( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RestartGame": {
		"prefix": "RestartGame",
		"body": "RestartGame( ${1:doScoreScreen})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"RestoreUnit": {
		"prefix": "RestoreUnit",
		"body": "RestoreUnit( ${1:cache}, ${2:missionKey}, ${3:key}, ${4:forWhichPlayer}, ${5:x}, ${6:y}, ${7:facing})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ResumeMusic": {
		"prefix": "ResumeMusic",
		"body": "ResumeMusic()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ResumeTimer": {
		"prefix": "ResumeTimer",
		"body": "ResumeTimer( ${1:whichTimer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ReviveHero": {
		"prefix": "ReviveHero",
		"body": "ReviveHero( ${1:whichHero}, ${2:x}, ${3:y}, ${4:doEyecandy})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ReviveHeroLoc": {
		"prefix": "ReviveHeroLoc",
		"body": "ReviveHeroLoc( ${1:whichHero}, ${2:loc}, ${3:doEyecandy})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"S2I": {
		"prefix": "S2I",
		"body": "S2I( ${1:s})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"S2R": {
		"prefix": "S2R",
		"body": "S2R( ${1:s})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveAbilityHandle": {
		"prefix": "SaveAbilityHandle",
		"body": "SaveAbilityHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichAbility})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveAgentHandle": {
		"prefix": "SaveAgentHandle",
		"body": "SaveAgentHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichAgent})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveBoolean": {
		"prefix": "SaveBoolean",
		"body": "SaveBoolean( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveBooleanExprHandle": {
		"prefix": "SaveBooleanExprHandle",
		"body": "SaveBooleanExprHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichBoolexpr})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveButtonHandle": {
		"prefix": "SaveButtonHandle",
		"body": "SaveButtonHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichButton})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveDefeatConditionHandle": {
		"prefix": "SaveDefeatConditionHandle",
		"body": "SaveDefeatConditionHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichDefeatcondition})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveDestructableHandle": {
		"prefix": "SaveDestructableHandle",
		"body": "SaveDestructableHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichDestructable})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveDialogHandle": {
		"prefix": "SaveDialogHandle",
		"body": "SaveDialogHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichDialog})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveEffectHandle": {
		"prefix": "SaveEffectHandle",
		"body": "SaveEffectHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichEffect})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveFogModifierHandle": {
		"prefix": "SaveFogModifierHandle",
		"body": "SaveFogModifierHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichFogModifier})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveFogStateHandle": {
		"prefix": "SaveFogStateHandle",
		"body": "SaveFogStateHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichFogState})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveForceHandle": {
		"prefix": "SaveForceHandle",
		"body": "SaveForceHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichForce})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveGame": {
		"prefix": "SaveGame",
		"body": "SaveGame( ${1:saveFileName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveGameCache": {
		"prefix": "SaveGameCache",
		"body": "SaveGameCache( ${1:whichCache})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveGameExists": {
		"prefix": "SaveGameExists",
		"body": "SaveGameExists( ${1:saveName})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveGroupHandle": {
		"prefix": "SaveGroupHandle",
		"body": "SaveGroupHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichGroup})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveHashtableHandle": {
		"prefix": "SaveHashtableHandle",
		"body": "SaveHashtableHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichHashtable})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveImageHandle": {
		"prefix": "SaveImageHandle",
		"body": "SaveImageHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichImage})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveInteger": {
		"prefix": "SaveInteger",
		"body": "SaveInteger( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveItemHandle": {
		"prefix": "SaveItemHandle",
		"body": "SaveItemHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveItemPoolHandle": {
		"prefix": "SaveItemPoolHandle",
		"body": "SaveItemPoolHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichItempool})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveLeaderboardHandle": {
		"prefix": "SaveLeaderboardHandle",
		"body": "SaveLeaderboardHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichLeaderboard})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveLightningHandle": {
		"prefix": "SaveLightningHandle",
		"body": "SaveLightningHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichLightning})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveLocationHandle": {
		"prefix": "SaveLocationHandle",
		"body": "SaveLocationHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveMultiboardHandle": {
		"prefix": "SaveMultiboardHandle",
		"body": "SaveMultiboardHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichMultiboard})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveMultiboardItemHandle": {
		"prefix": "SaveMultiboardItemHandle",
		"body": "SaveMultiboardItemHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichMultiboarditem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SavePlayerHandle": {
		"prefix": "SavePlayerHandle",
		"body": "SavePlayerHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichPlayer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveQuestHandle": {
		"prefix": "SaveQuestHandle",
		"body": "SaveQuestHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichQuest})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveQuestItemHandle": {
		"prefix": "SaveQuestItemHandle",
		"body": "SaveQuestItemHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichQuestitem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveReal": {
		"prefix": "SaveReal",
		"body": "SaveReal( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveRectHandle": {
		"prefix": "SaveRectHandle",
		"body": "SaveRectHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichRect})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveRegionHandle": {
		"prefix": "SaveRegionHandle",
		"body": "SaveRegionHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichRegion})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveSoundHandle": {
		"prefix": "SaveSoundHandle",
		"body": "SaveSoundHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichSound})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveStr": {
		"prefix": "SaveStr",
		"body": "SaveStr( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveTextTagHandle": {
		"prefix": "SaveTextTagHandle",
		"body": "SaveTextTagHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichTexttag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveTimerDialogHandle": {
		"prefix": "SaveTimerDialogHandle",
		"body": "SaveTimerDialogHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichTimerdialog})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveTimerHandle": {
		"prefix": "SaveTimerHandle",
		"body": "SaveTimerHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichTimer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveTrackableHandle": {
		"prefix": "SaveTrackableHandle",
		"body": "SaveTrackableHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichTrackable})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveTriggerActionHandle": {
		"prefix": "SaveTriggerActionHandle",
		"body": "SaveTriggerActionHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichTriggeraction})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveTriggerConditionHandle": {
		"prefix": "SaveTriggerConditionHandle",
		"body": "SaveTriggerConditionHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichTriggercondition})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveTriggerEventHandle": {
		"prefix": "SaveTriggerEventHandle",
		"body": "SaveTriggerEventHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichEvent})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveTriggerHandle": {
		"prefix": "SaveTriggerHandle",
		"body": "SaveTriggerHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveUbersplatHandle": {
		"prefix": "SaveUbersplatHandle",
		"body": "SaveUbersplatHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichUbersplat})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveUnitHandle": {
		"prefix": "SaveUnitHandle",
		"body": "SaveUnitHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveUnitPoolHandle": {
		"prefix": "SaveUnitPoolHandle",
		"body": "SaveUnitPoolHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichUnitpool})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SaveWidgetHandle": {
		"prefix": "SaveWidgetHandle",
		"body": "SaveWidgetHandle( ${1:table}, ${2:parentKey}, ${3:childKey}, ${4:whichWidget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SelectHeroSkill": {
		"prefix": "SelectHeroSkill",
		"body": "SelectHeroSkill( ${1:whichHero}, ${2:abilcode})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SelectUnit": {
		"prefix": "SelectUnit",
		"body": "SelectUnit( ${1:whichUnit}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetAllItemTypeSlots": {
		"prefix": "SetAllItemTypeSlots",
		"body": "SetAllItemTypeSlots( ${1:slots})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetAllUnitTypeSlots": {
		"prefix": "SetAllUnitTypeSlots",
		"body": "SetAllUnitTypeSlots( ${1:slots})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetAllyColorFilterState": {
		"prefix": "SetAllyColorFilterState",
		"body": "SetAllyColorFilterState( ${1:state})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetAltMinimapIcon": {
		"prefix": "SetAltMinimapIcon",
		"body": "SetAltMinimapIcon( ${1:iconPath})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetBlight": {
		"prefix": "SetBlight",
		"body": "SetBlight( ${1:whichPlayer}, ${2:x}, ${3:y}, ${4:radius}, ${5:addBlight})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetBlightLoc": {
		"prefix": "SetBlightLoc",
		"body": "SetBlightLoc( ${1:whichPlayer}, ${2:whichLocation}, ${3:radius}, ${4:addBlight})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetBlightPoint": {
		"prefix": "SetBlightPoint",
		"body": "SetBlightPoint( ${1:whichPlayer}, ${2:x}, ${3:y}, ${4:addBlight})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetBlightRect": {
		"prefix": "SetBlightRect",
		"body": "SetBlightRect( ${1:whichPlayer}, ${2:r}, ${3:addBlight})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCameraBounds": {
		"prefix": "SetCameraBounds",
		"body": "SetCameraBounds( ${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${8:y4})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCameraField": {
		"prefix": "SetCameraField",
		"body": "SetCameraField( ${1:whichField}, ${2:value}, ${3:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCameraOrientController": {
		"prefix": "SetCameraOrientController",
		"body": "SetCameraOrientController( ${1:whichUnit}, ${2:xoffset}, ${3:yoffset})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCameraPosition": {
		"prefix": "SetCameraPosition",
		"body": "SetCameraPosition( ${1:x}, ${2:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCameraQuickPosition": {
		"prefix": "SetCameraQuickPosition",
		"body": "SetCameraQuickPosition( ${1:x}, ${2:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCameraRotateMode": {
		"prefix": "SetCameraRotateMode",
		"body": "SetCameraRotateMode( ${1:x}, ${2:y}, ${3:radiansToSweep}, ${4:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCameraTargetController": {
		"prefix": "SetCameraTargetController",
		"body": "SetCameraTargetController( ${1:whichUnit}, ${2:xoffset}, ${3:yoffset}, ${4:inheritOrientation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCampaignAvailable": {
		"prefix": "SetCampaignAvailable",
		"body": "SetCampaignAvailable( ${1:campaignNumber}, ${2:available})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCampaignMenuRace": {
		"prefix": "SetCampaignMenuRace",
		"body": "SetCampaignMenuRace( ${1:r})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCampaignMenuRaceEx": {
		"prefix": "SetCampaignMenuRaceEx",
		"body": "SetCampaignMenuRaceEx( ${1:campaignIndex})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCineFilterBlendMode": {
		"prefix": "SetCineFilterBlendMode",
		"body": "SetCineFilterBlendMode( ${1:whichMode})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCineFilterDuration": {
		"prefix": "SetCineFilterDuration",
		"body": "SetCineFilterDuration( ${1:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCineFilterEndColor": {
		"prefix": "SetCineFilterEndColor",
		"body": "SetCineFilterEndColor( ${1:red}, ${2:green}, ${3:blue}, ${4:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCineFilterEndUV": {
		"prefix": "SetCineFilterEndUV",
		"body": "SetCineFilterEndUV( ${1:minu}, ${2:minv}, ${3:maxu}, ${4:maxv})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCineFilterStartColor": {
		"prefix": "SetCineFilterStartColor",
		"body": "SetCineFilterStartColor( ${1:red}, ${2:green}, ${3:blue}, ${4:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCineFilterStartUV": {
		"prefix": "SetCineFilterStartUV",
		"body": "SetCineFilterStartUV( ${1:minu}, ${2:minv}, ${3:maxu}, ${4:maxv})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCineFilterTexMapFlags": {
		"prefix": "SetCineFilterTexMapFlags",
		"body": "SetCineFilterTexMapFlags( ${1:whichFlags})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCineFilterTexture": {
		"prefix": "SetCineFilterTexture",
		"body": "SetCineFilterTexture( ${1:filename})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCinematicCamera": {
		"prefix": "SetCinematicCamera",
		"body": "SetCinematicCamera( ${1:cameraModelFile})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCinematicScene": {
		"prefix": "SetCinematicScene",
		"body": "SetCinematicScene( ${1:portraitUnitId}, ${2:color}, ${3:speakerTitle}, ${4:text}, ${5:sceneDuration}, ${6:voiceoverDuration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCreatureDensity": {
		"prefix": "SetCreatureDensity",
		"body": "SetCreatureDensity( ${1:whichdensity})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCreepCampFilterState": {
		"prefix": "SetCreepCampFilterState",
		"body": "SetCreepCampFilterState( ${1:state})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetCustomCampaignButtonVisible": {
		"prefix": "SetCustomCampaignButtonVisible",
		"body": "SetCustomCampaignButtonVisible( ${1:whichButton}, ${2:visible})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetDayNightModels": {
		"prefix": "SetDayNightModels",
		"body": "SetDayNightModels( ${1:terrainDNCFile}, ${2:unitDNCFile})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetDefaultDifficulty": {
		"prefix": "SetDefaultDifficulty",
		"body": "SetDefaultDifficulty( ${1:g})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetDestructableAnimation": {
		"prefix": "SetDestructableAnimation",
		"body": "SetDestructableAnimation( ${1:d}, ${2:whichAnimation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetDestructableAnimationSpeed": {
		"prefix": "SetDestructableAnimationSpeed",
		"body": "SetDestructableAnimationSpeed( ${1:d}, ${2:speedFactor})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetDestructableInvulnerable": {
		"prefix": "SetDestructableInvulnerable",
		"body": "SetDestructableInvulnerable( ${1:d}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetDestructableLife": {
		"prefix": "SetDestructableLife",
		"body": "SetDestructableLife( ${1:d}, ${2:life})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetDestructableMaxLife": {
		"prefix": "SetDestructableMaxLife",
		"body": "SetDestructableMaxLife( ${1:d}, ${2:max})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetDestructableOccluderHeight": {
		"prefix": "SetDestructableOccluderHeight",
		"body": "SetDestructableOccluderHeight( ${1:d}, ${2:height})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetDoodadAnimation": {
		"prefix": "SetDoodadAnimation",
		"body": "SetDoodadAnimation( ${1:x}, ${2:y}, ${3:radius}, ${4:doodadID}, ${5:nearestOnly}, ${6:animName}, ${7:animRandom})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetDoodadAnimationRect": {
		"prefix": "SetDoodadAnimationRect",
		"body": "SetDoodadAnimationRect( ${1:r}, ${2:doodadID}, ${3:animName}, ${4:animRandom})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetEdCinematicAvailable": {
		"prefix": "SetEdCinematicAvailable",
		"body": "SetEdCinematicAvailable( ${1:campaignNumber}, ${2:available})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetFloatGameState": {
		"prefix": "SetFloatGameState",
		"body": "SetFloatGameState( ${1:whichFloatGameState}, ${2:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetFogStateRadius": {
		"prefix": "SetFogStateRadius",
		"body": "SetFogStateRadius( ${1:forWhichPlayer}, ${2:whichState}, ${3:centerx}, ${4:centerY}, ${5:radius}, ${6:useSharedVision})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetFogStateRadiusLoc": {
		"prefix": "SetFogStateRadiusLoc",
		"body": "SetFogStateRadiusLoc( ${1:forWhichPlayer}, ${2:whichState}, ${3:center}, ${4:radius}, ${5:useSharedVision})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetFogStateRect": {
		"prefix": "SetFogStateRect",
		"body": "SetFogStateRect( ${1:forWhichPlayer}, ${2:whichState}, ${3:where}, ${4:useSharedVision})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetGameDifficulty": {
		"prefix": "SetGameDifficulty",
		"body": "SetGameDifficulty( ${1:whichdifficulty})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetGamePlacement": {
		"prefix": "SetGamePlacement",
		"body": "SetGamePlacement( ${1:whichPlacementType})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetGameSpeed": {
		"prefix": "SetGameSpeed",
		"body": "SetGameSpeed( ${1:whichspeed})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetGameTypeSupported": {
		"prefix": "SetGameTypeSupported",
		"body": "SetGameTypeSupported( ${1:whichGameType}, ${2:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetHeroAgi": {
		"prefix": "SetHeroAgi",
		"body": "SetHeroAgi( ${1:whichHero}, ${2:newAgi}, ${3:permanent})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetHeroInt": {
		"prefix": "SetHeroInt",
		"body": "SetHeroInt( ${1:whichHero}, ${2:newInt}, ${3:permanent})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetHeroLevel": {
		"prefix": "SetHeroLevel",
		"body": "SetHeroLevel( ${1:whichHero}, ${2:level}, ${3:showEyeCandy})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetHeroStr": {
		"prefix": "SetHeroStr",
		"body": "SetHeroStr( ${1:whichHero}, ${2:newStr}, ${3:permanent})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetHeroXP": {
		"prefix": "SetHeroXP",
		"body": "SetHeroXP( ${1:whichHero}, ${2:newXpVal}, ${3:showEyeCandy})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetImageAboveWater": {
		"prefix": "SetImageAboveWater",
		"body": "SetImageAboveWater( ${1:whichImage}, ${2:flag}, ${3:useWaterAlpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetImageColor": {
		"prefix": "SetImageColor",
		"body": "SetImageColor( ${1:whichImage}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetImageConstantHeight": {
		"prefix": "SetImageConstantHeight",
		"body": "SetImageConstantHeight( ${1:whichImage}, ${2:flag}, ${3:height})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetImagePosition": {
		"prefix": "SetImagePosition",
		"body": "SetImagePosition( ${1:whichImage}, ${2:x}, ${3:y}, ${4:z})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetImageRender": {
		"prefix": "SetImageRender",
		"body": "SetImageRender( ${1:whichImage}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetImageRenderAlways": {
		"prefix": "SetImageRenderAlways",
		"body": "SetImageRenderAlways( ${1:whichImage}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetImageType": {
		"prefix": "SetImageType",
		"body": "SetImageType( ${1:whichImage}, ${2:imageType})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetIntegerGameState": {
		"prefix": "SetIntegerGameState",
		"body": "SetIntegerGameState( ${1:whichIntegerGameState}, ${2:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetIntroShotModel": {
		"prefix": "SetIntroShotModel",
		"body": "SetIntroShotModel( ${1:introModelPath})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetIntroShotText": {
		"prefix": "SetIntroShotText",
		"body": "SetIntroShotText( ${1:introText})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetItemCharges": {
		"prefix": "SetItemCharges",
		"body": "SetItemCharges( ${1:whichItem}, ${2:charges})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetItemDropID": {
		"prefix": "SetItemDropID",
		"body": "SetItemDropID( ${1:whichItem}, ${2:unitId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetItemDropOnDeath": {
		"prefix": "SetItemDropOnDeath",
		"body": "SetItemDropOnDeath( ${1:whichItem}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetItemDroppable": {
		"prefix": "SetItemDroppable",
		"body": "SetItemDroppable( ${1:i}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetItemInvulnerable": {
		"prefix": "SetItemInvulnerable",
		"body": "SetItemInvulnerable( ${1:whichItem}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetItemPawnable": {
		"prefix": "SetItemPawnable",
		"body": "SetItemPawnable( ${1:i}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetItemPlayer": {
		"prefix": "SetItemPlayer",
		"body": "SetItemPlayer( ${1:whichItem}, ${2:whichPlayer}, ${3:changeColor})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetItemPosition": {
		"prefix": "SetItemPosition",
		"body": "SetItemPosition( ${1:i}, ${2:x}, ${3:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetItemTypeSlots": {
		"prefix": "SetItemTypeSlots",
		"body": "SetItemTypeSlots( ${1:whichUnit}, ${2:slots})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetItemUserData": {
		"prefix": "SetItemUserData",
		"body": "SetItemUserData( ${1:whichItem}, ${2:data})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetItemVisible": {
		"prefix": "SetItemVisible",
		"body": "SetItemVisible( ${1:whichItem}, ${2:show})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetLightningColor": {
		"prefix": "SetLightningColor",
		"body": "SetLightningColor( ${1:whichBolt}, ${2:r}, ${3:g}, ${4:b}, ${5:a})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetMapDescription": {
		"prefix": "SetMapDescription",
		"body": "SetMapDescription( ${1:description})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetMapFlag": {
		"prefix": "SetMapFlag",
		"body": "SetMapFlag( ${1:whichMapFlag}, ${2:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetMapMusic": {
		"prefix": "SetMapMusic",
		"body": "SetMapMusic( ${1:musicName}, ${2:random}, ${3:index})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetMapName": {
		"prefix": "SetMapName",
		"body": "SetMapName( ${1:name})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetMissionAvailable": {
		"prefix": "SetMissionAvailable",
		"body": "SetMissionAvailable( ${1:campaignNumber}, ${2:missionNumber}, ${3:available})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetMusicPlayPosition": {
		"prefix": "SetMusicPlayPosition",
		"body": "SetMusicPlayPosition( ${1:millisecs})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetMusicVolume": {
		"prefix": "SetMusicVolume",
		"body": "SetMusicVolume( ${1:volume})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetOpCinematicAvailable": {
		"prefix": "SetOpCinematicAvailable",
		"body": "SetOpCinematicAvailable( ${1:campaignNumber}, ${2:available})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerAbilityAvailable": {
		"prefix": "SetPlayerAbilityAvailable",
		"body": "SetPlayerAbilityAvailable( ${1:whichPlayer}, ${2:abilid}, ${3:avail})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerAlliance": {
		"prefix": "SetPlayerAlliance",
		"body": "SetPlayerAlliance( ${1:sourcePlayer}, ${2:otherPlayer}, ${3:whichAllianceSetting}, ${4:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerColor": {
		"prefix": "SetPlayerColor",
		"body": "SetPlayerColor( ${1:whichPlayer}, ${2:color})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerController": {
		"prefix": "SetPlayerController",
		"body": "SetPlayerController( ${1:whichPlayer}, ${2:controlType})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerHandicap": {
		"prefix": "SetPlayerHandicap",
		"body": "SetPlayerHandicap( ${1:whichPlayer}, ${2:handicap})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerHandicapXP": {
		"prefix": "SetPlayerHandicapXP",
		"body": "SetPlayerHandicapXP( ${1:whichPlayer}, ${2:handicap})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerName": {
		"prefix": "SetPlayerName",
		"body": "SetPlayerName( ${1:whichPlayer}, ${2:name})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerOnScoreScreen": {
		"prefix": "SetPlayerOnScoreScreen",
		"body": "SetPlayerOnScoreScreen( ${1:whichPlayer}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerRacePreference": {
		"prefix": "SetPlayerRacePreference",
		"body": "SetPlayerRacePreference( ${1:whichPlayer}, ${2:whichRacePreference})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerRaceSelectable": {
		"prefix": "SetPlayerRaceSelectable",
		"body": "SetPlayerRaceSelectable( ${1:whichPlayer}, ${2:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayers": {
		"prefix": "SetPlayers",
		"body": "SetPlayers( ${1:playercount})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerStartLocation": {
		"prefix": "SetPlayerStartLocation",
		"body": "SetPlayerStartLocation( ${1:whichPlayer}, ${2:startLocIndex})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerState": {
		"prefix": "SetPlayerState",
		"body": "SetPlayerState( ${1:whichPlayer}, ${2:whichPlayerState}, ${3:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerTaxRate": {
		"prefix": "SetPlayerTaxRate",
		"body": "SetPlayerTaxRate( ${1:sourcePlayer}, ${2:otherPlayer}, ${3:whichResource}, ${4:rate})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerTeam": {
		"prefix": "SetPlayerTeam",
		"body": "SetPlayerTeam( ${1:whichPlayer}, ${2:whichTeam})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerTechMaxAllowed": {
		"prefix": "SetPlayerTechMaxAllowed",
		"body": "SetPlayerTechMaxAllowed( ${1:whichPlayer}, ${2:techid}, ${3:maximum})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerTechResearched": {
		"prefix": "SetPlayerTechResearched",
		"body": "SetPlayerTechResearched( ${1:whichPlayer}, ${2:techid}, ${3:setToLevel})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetPlayerUnitsOwner": {
		"prefix": "SetPlayerUnitsOwner",
		"body": "SetPlayerUnitsOwner( ${1:whichPlayer}, ${2:newOwner})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetRandomSeed": {
		"prefix": "SetRandomSeed",
		"body": "SetRandomSeed( ${1:seed})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetRect": {
		"prefix": "SetRect",
		"body": "SetRect( ${1:whichRect}, ${2:minx}, ${3:miny}, ${4:maxx}, ${5:maxy})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetRectFromLoc": {
		"prefix": "SetRectFromLoc",
		"body": "SetRectFromLoc( ${1:whichRect}, ${2:min}, ${3:max})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetReservedLocalHeroButtons": {
		"prefix": "SetReservedLocalHeroButtons",
		"body": "SetReservedLocalHeroButtons( ${1:reserved})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetResourceAmount": {
		"prefix": "SetResourceAmount",
		"body": "SetResourceAmount( ${1:whichUnit}, ${2:amount})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetResourceDensity": {
		"prefix": "SetResourceDensity",
		"body": "SetResourceDensity( ${1:whichdensity})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetSkyModel": {
		"prefix": "SetSkyModel",
		"body": "SetSkyModel( ${1:skyModelFile})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetSoundChannel": {
		"prefix": "SetSoundChannel",
		"body": "SetSoundChannel( ${1:soundHandle}, ${2:channel})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetSoundConeAngles": {
		"prefix": "SetSoundConeAngles",
		"body": "SetSoundConeAngles( ${1:soundHandle}, ${2:inside}, ${3:outside}, ${4:outsideVolume})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetSoundConeOrientation": {
		"prefix": "SetSoundConeOrientation",
		"body": "SetSoundConeOrientation( ${1:soundHandle}, ${2:x}, ${3:y}, ${4:z})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetSoundDistanceCutoff": {
		"prefix": "SetSoundDistanceCutoff",
		"body": "SetSoundDistanceCutoff( ${1:soundHandle}, ${2:cutoff})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetSoundDistances": {
		"prefix": "SetSoundDistances",
		"body": "SetSoundDistances( ${1:soundHandle}, ${2:minDist}, ${3:maxDist})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetSoundDuration": {
		"prefix": "SetSoundDuration",
		"body": "SetSoundDuration( ${1:soundHandle}, ${2:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetSoundParamsFromLabel": {
		"prefix": "SetSoundParamsFromLabel",
		"body": "SetSoundParamsFromLabel( ${1:soundHandle}, ${2:soundLabel})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetSoundPitch": {
		"prefix": "SetSoundPitch",
		"body": "SetSoundPitch( ${1:soundHandle}, ${2:pitch})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetSoundPlayPosition": {
		"prefix": "SetSoundPlayPosition",
		"body": "SetSoundPlayPosition( ${1:soundHandle}, ${2:millisecs})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetSoundPosition": {
		"prefix": "SetSoundPosition",
		"body": "SetSoundPosition( ${1:soundHandle}, ${2:x}, ${3:y}, ${4:z})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetSoundVelocity": {
		"prefix": "SetSoundVelocity",
		"body": "SetSoundVelocity( ${1:soundHandle}, ${2:x}, ${3:y}, ${4:z})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetSoundVolume": {
		"prefix": "SetSoundVolume",
		"body": "SetSoundVolume( ${1:soundHandle}, ${2:volume})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetStartLocPrio": {
		"prefix": "SetStartLocPrio",
		"body": "SetStartLocPrio( ${1:whichStartLoc}, ${2:prioSlotIndex}, ${3:otherStartLocIndex}, ${4:priority})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetStartLocPrioCount": {
		"prefix": "SetStartLocPrioCount",
		"body": "SetStartLocPrioCount( ${1:whichStartLoc}, ${2:prioSlotCount})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTeams": {
		"prefix": "SetTeams",
		"body": "SetTeams( ${1:teamcount})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTerrainFog": {
		"prefix": "SetTerrainFog",
		"body": "SetTerrainFog( ${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTerrainFogEx": {
		"prefix": "SetTerrainFogEx",
		"body": "SetTerrainFogEx( ${1:style}, ${2:zstart}, ${3:zend}, ${4:density}, ${5:red}, ${6:green}, ${7:blue})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTerrainPathable": {
		"prefix": "SetTerrainPathable",
		"body": "SetTerrainPathable( ${1:x}, ${2:y}, ${3:t}, ${4:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTerrainType": {
		"prefix": "SetTerrainType",
		"body": "SetTerrainType( ${1:x}, ${2:y}, ${3:terrainType}, ${4:variation}, ${5:area}, ${6:shape})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTextTagAge": {
		"prefix": "SetTextTagAge",
		"body": "SetTextTagAge( ${1:t}, ${2:age})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTextTagColor": {
		"prefix": "SetTextTagColor",
		"body": "SetTextTagColor( ${1:t}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTextTagFadepoint": {
		"prefix": "SetTextTagFadepoint",
		"body": "SetTextTagFadepoint( ${1:t}, ${2:fadepoint})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTextTagLifespan": {
		"prefix": "SetTextTagLifespan",
		"body": "SetTextTagLifespan( ${1:t}, ${2:lifespan})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTextTagPermanent": {
		"prefix": "SetTextTagPermanent",
		"body": "SetTextTagPermanent( ${1:t}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTextTagPos": {
		"prefix": "SetTextTagPos",
		"body": "SetTextTagPos( ${1:t}, ${2:x}, ${3:y}, ${4:heightOffset})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTextTagPosUnit": {
		"prefix": "SetTextTagPosUnit",
		"body": "SetTextTagPosUnit( ${1:t}, ${2:whichUnit}, ${3:heightOffset})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTextTagSuspended": {
		"prefix": "SetTextTagSuspended",
		"body": "SetTextTagSuspended( ${1:t}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTextTagText": {
		"prefix": "SetTextTagText",
		"body": "SetTextTagText( ${1:t}, ${2:s}, ${3:height})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTextTagVelocity": {
		"prefix": "SetTextTagVelocity",
		"body": "SetTextTagVelocity( ${1:t}, ${2:xvel}, ${3:yvel})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTextTagVisibility": {
		"prefix": "SetTextTagVisibility",
		"body": "SetTextTagVisibility( ${1:t}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetThematicMusicPlayPosition": {
		"prefix": "SetThematicMusicPlayPosition",
		"body": "SetThematicMusicPlayPosition( ${1:millisecs})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTimeOfDayScale": {
		"prefix": "SetTimeOfDayScale",
		"body": "SetTimeOfDayScale( ${1:r})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetTutorialCleared": {
		"prefix": "SetTutorialCleared",
		"body": "SetTutorialCleared( ${1:cleared})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUbersplatRender": {
		"prefix": "SetUbersplatRender",
		"body": "SetUbersplatRender( ${1:whichSplat}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUbersplatRenderAlways": {
		"prefix": "SetUbersplatRenderAlways",
		"body": "SetUbersplatRenderAlways( ${1:whichSplat}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitAbilityLevel": {
		"prefix": "SetUnitAbilityLevel",
		"body": "SetUnitAbilityLevel( ${1:whichUnit}, ${2:abilcode}, ${3:level})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitAcquireRange": {
		"prefix": "SetUnitAcquireRange",
		"body": "SetUnitAcquireRange( ${1:whichUnit}, ${2:newAcquireRange})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitAnimation": {
		"prefix": "SetUnitAnimation",
		"body": "SetUnitAnimation( ${1:whichUnit}, ${2:whichAnimation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitAnimationByIndex": {
		"prefix": "SetUnitAnimationByIndex",
		"body": "SetUnitAnimationByIndex( ${1:whichUnit}, ${2:whichAnimation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitAnimationWithRarity": {
		"prefix": "SetUnitAnimationWithRarity",
		"body": "SetUnitAnimationWithRarity( ${1:whichUnit}, ${2:whichAnimation}, ${3:rarity})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitBlendTime": {
		"prefix": "SetUnitBlendTime",
		"body": "SetUnitBlendTime( ${1:whichUnit}, ${2:blendTime})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitColor": {
		"prefix": "SetUnitColor",
		"body": "SetUnitColor( ${1:whichUnit}, ${2:whichColor})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitCreepGuard": {
		"prefix": "SetUnitCreepGuard",
		"body": "SetUnitCreepGuard( ${1:whichUnit}, ${2:creepGuard})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitExploded": {
		"prefix": "SetUnitExploded",
		"body": "SetUnitExploded( ${1:whichUnit}, ${2:exploded})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitFacing": {
		"prefix": "SetUnitFacing",
		"body": "SetUnitFacing( ${1:whichUnit}, ${2:facingAngle})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitFacingTimed": {
		"prefix": "SetUnitFacingTimed",
		"body": "SetUnitFacingTimed( ${1:whichUnit}, ${2:facingAngle}, ${3:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitFlyHeight": {
		"prefix": "SetUnitFlyHeight",
		"body": "SetUnitFlyHeight( ${1:whichUnit}, ${2:newHeight}, ${3:rate})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitFog": {
		"prefix": "SetUnitFog",
		"body": "SetUnitFog( ${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitInvulnerable": {
		"prefix": "SetUnitInvulnerable",
		"body": "SetUnitInvulnerable( ${1:whichUnit}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitLookAt": {
		"prefix": "SetUnitLookAt",
		"body": "SetUnitLookAt( ${1:whichUnit}, ${2:whichBone}, ${3:lookAtTarget}, ${4:offsetX}, ${5:offsetY}, ${6:offsetZ})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitMoveSpeed": {
		"prefix": "SetUnitMoveSpeed",
		"body": "SetUnitMoveSpeed( ${1:whichUnit}, ${2:newSpeed})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitOwner": {
		"prefix": "SetUnitOwner",
		"body": "SetUnitOwner( ${1:whichUnit}, ${2:whichPlayer}, ${3:changeColor})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitPathing": {
		"prefix": "SetUnitPathing",
		"body": "SetUnitPathing( ${1:whichUnit}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitPosition": {
		"prefix": "SetUnitPosition",
		"body": "SetUnitPosition( ${1:whichUnit}, ${2:newX}, ${3:newY})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitPositionLoc": {
		"prefix": "SetUnitPositionLoc",
		"body": "SetUnitPositionLoc( ${1:whichUnit}, ${2:whichLocation})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitPropWindow": {
		"prefix": "SetUnitPropWindow",
		"body": "SetUnitPropWindow( ${1:whichUnit}, ${2:newPropWindowAngle})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitRescuable": {
		"prefix": "SetUnitRescuable",
		"body": "SetUnitRescuable( ${1:whichUnit}, ${2:byWhichPlayer}, ${3:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitRescueRange": {
		"prefix": "SetUnitRescueRange",
		"body": "SetUnitRescueRange( ${1:whichUnit}, ${2:range})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitScale": {
		"prefix": "SetUnitScale",
		"body": "SetUnitScale( ${1:whichUnit}, ${2:scaleX}, ${3:scaleY}, ${4:scaleZ})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitState": {
		"prefix": "SetUnitState",
		"body": "SetUnitState( ${1:whichUnit}, ${2:whichUnitState}, ${3:newVal})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitTimeScale": {
		"prefix": "SetUnitTimeScale",
		"body": "SetUnitTimeScale( ${1:whichUnit}, ${2:timeScale})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitTurnSpeed": {
		"prefix": "SetUnitTurnSpeed",
		"body": "SetUnitTurnSpeed( ${1:whichUnit}, ${2:newTurnSpeed})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitTypeSlots": {
		"prefix": "SetUnitTypeSlots",
		"body": "SetUnitTypeSlots( ${1:whichUnit}, ${2:slots})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitUseFood": {
		"prefix": "SetUnitUseFood",
		"body": "SetUnitUseFood( ${1:whichUnit}, ${2:useFood})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitUserData": {
		"prefix": "SetUnitUserData",
		"body": "SetUnitUserData( ${1:whichUnit}, ${2:data})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitVertexColor": {
		"prefix": "SetUnitVertexColor",
		"body": "SetUnitVertexColor( ${1:whichUnit}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitX": {
		"prefix": "SetUnitX",
		"body": "SetUnitX( ${1:whichUnit}, ${2:newX})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetUnitY": {
		"prefix": "SetUnitY",
		"body": "SetUnitY( ${1:whichUnit}, ${2:newY})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetWaterBaseColor": {
		"prefix": "SetWaterBaseColor",
		"body": "SetWaterBaseColor( ${1:red}, ${2:green}, ${3:blue}, ${4:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetWaterDeforms": {
		"prefix": "SetWaterDeforms",
		"body": "SetWaterDeforms( ${1:val})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SetWidgetLife": {
		"prefix": "SetWidgetLife",
		"body": "SetWidgetLife( ${1:whichWidget}, ${2:newLife})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ShowDestructable": {
		"prefix": "ShowDestructable",
		"body": "ShowDestructable( ${1:d}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ShowImage": {
		"prefix": "ShowImage",
		"body": "ShowImage( ${1:whichImage}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ShowInterface": {
		"prefix": "ShowInterface",
		"body": "ShowInterface( ${1:flag}, ${2:fadeDuration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ShowUbersplat": {
		"prefix": "ShowUbersplat",
		"body": "ShowUbersplat( ${1:whichSplat}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"ShowUnit": {
		"prefix": "ShowUnit",
		"body": "ShowUnit( ${1:whichUnit}, ${2:show})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Sin": {
		"prefix": "Sin",
		"body": "Sin( ${1:radians})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SquareRoot": {
		"prefix": "SquareRoot",
		"body": "SquareRoot( ${1:x})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StartCampaignAI": {
		"prefix": "StartCampaignAI",
		"body": "StartCampaignAI( ${1:num}, ${2:script})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StartMeleeAI": {
		"prefix": "StartMeleeAI",
		"body": "StartMeleeAI( ${1:num}, ${2:script})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StartSound": {
		"prefix": "StartSound",
		"body": "StartSound( ${1:soundHandle})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StopCamera": {
		"prefix": "StopCamera",
		"body": "StopCamera()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StopMusic": {
		"prefix": "StopMusic",
		"body": "StopMusic( ${1:fadeOut})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StopSound": {
		"prefix": "StopSound",
		"body": "StopSound( ${1:soundHandle}, ${2:killWhenDone}, ${3:fadeOut})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StoreBoolean": {
		"prefix": "StoreBoolean",
		"body": "StoreBoolean( ${1:cache}, ${2:missionKey}, ${3:key}, ${4:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StoreInteger": {
		"prefix": "StoreInteger",
		"body": "StoreInteger( ${1:cache}, ${2:missionKey}, ${3:key}, ${4:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StoreReal": {
		"prefix": "StoreReal",
		"body": "StoreReal( ${1:cache}, ${2:missionKey}, ${3:key}, ${4:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StoreString": {
		"prefix": "StoreString",
		"body": "StoreString( ${1:cache}, ${2:missionKey}, ${3:key}, ${4:value})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StoreUnit": {
		"prefix": "StoreUnit",
		"body": "StoreUnit( ${1:cache}, ${2:missionKey}, ${3:key}, ${4:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StringCase": {
		"prefix": "StringCase",
		"body": "StringCase( ${1:source}, ${2:upper})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StringHash": {
		"prefix": "StringHash",
		"body": "StringHash( ${1:s})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"StringLength": {
		"prefix": "StringLength",
		"body": "StringLength( ${1:s})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SubString": {
		"prefix": "SubString",
		"body": "SubString( ${1:source}, ${2:start}, ${3:end})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SuspendHeroXP": {
		"prefix": "SuspendHeroXP",
		"body": "SuspendHeroXP( ${1:whichHero}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SuspendTimeOfDay": {
		"prefix": "SuspendTimeOfDay",
		"body": "SuspendTimeOfDay( ${1:b})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SyncSelections": {
		"prefix": "SyncSelections",
		"body": "SyncSelections()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SyncStoredBoolean": {
		"prefix": "SyncStoredBoolean",
		"body": "SyncStoredBoolean( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SyncStoredInteger": {
		"prefix": "SyncStoredInteger",
		"body": "SyncStoredInteger( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SyncStoredReal": {
		"prefix": "SyncStoredReal",
		"body": "SyncStoredReal( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SyncStoredString": {
		"prefix": "SyncStoredString",
		"body": "SyncStoredString( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"SyncStoredUnit": {
		"prefix": "SyncStoredUnit",
		"body": "SyncStoredUnit( ${1:cache}, ${2:missionKey}, ${3:key})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"Tan": {
		"prefix": "Tan",
		"body": "Tan( ${1:radians})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TerrainDeformCrater": {
		"prefix": "TerrainDeformCrater",
		"body": "TerrainDeformCrater( ${1:x}, ${2:y}, ${3:radius}, ${4:depth}, ${5:duration}, ${6:permanent})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TerrainDeformRandom": {
		"prefix": "TerrainDeformRandom",
		"body": "TerrainDeformRandom( ${1:x}, ${2:y}, ${3:radius}, ${4:minDelta}, ${5:maxDelta}, ${6:duration}, ${7:updateInterval})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TerrainDeformRipple": {
		"prefix": "TerrainDeformRipple",
		"body": "TerrainDeformRipple( ${1:x}, ${2:y}, ${3:radius}, ${4:depth}, ${5:duration}, ${6:count}, ${7:spaceWaves}, ${8:timeWaves}, ${9:radiusStartPct}, ${10:limitNeg})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TerrainDeformStop": {
		"prefix": "TerrainDeformStop",
		"body": "TerrainDeformStop( ${1:deformation}, ${2:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TerrainDeformStopAll": {
		"prefix": "TerrainDeformStopAll",
		"body": "TerrainDeformStopAll()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TerrainDeformWave": {
		"prefix": "TerrainDeformWave",
		"body": "TerrainDeformWave( ${1:x}, ${2:y}, ${3:dirX}, ${4:dirY}, ${5:distance}, ${6:speed}, ${7:radius}, ${8:depth}, ${9:trailTime}, ${10:count})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TimerDialogDisplay": {
		"prefix": "TimerDialogDisplay",
		"body": "TimerDialogDisplay( ${1:whichDialog}, ${2:display})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TimerDialogSetRealTimeRemaining": {
		"prefix": "TimerDialogSetRealTimeRemaining",
		"body": "TimerDialogSetRealTimeRemaining( ${1:whichDialog}, ${2:timeRemaining})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TimerDialogSetSpeed": {
		"prefix": "TimerDialogSetSpeed",
		"body": "TimerDialogSetSpeed( ${1:whichDialog}, ${2:speedMultFactor})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TimerDialogSetTimeColor": {
		"prefix": "TimerDialogSetTimeColor",
		"body": "TimerDialogSetTimeColor( ${1:whichDialog}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TimerDialogSetTitle": {
		"prefix": "TimerDialogSetTitle",
		"body": "TimerDialogSetTitle( ${1:whichDialog}, ${2:title})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TimerDialogSetTitleColor": {
		"prefix": "TimerDialogSetTitleColor",
		"body": "TimerDialogSetTitleColor( ${1:whichDialog}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TimerGetElapsed": {
		"prefix": "TimerGetElapsed",
		"body": "TimerGetElapsed( ${1:whichTimer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TimerGetRemaining": {
		"prefix": "TimerGetRemaining",
		"body": "TimerGetRemaining( ${1:whichTimer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TimerGetTimeout": {
		"prefix": "TimerGetTimeout",
		"body": "TimerGetTimeout( ${1:whichTimer})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TimerStart": {
		"prefix": "TimerStart",
		"body": "TimerStart( ${1:whichTimer}, ${2:timeout}, ${3:periodic}, ${4:handlerFunc})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerAddAction": {
		"prefix": "TriggerAddAction",
		"body": "TriggerAddAction( ${1:whichTrigger}, ${2:actionFunc})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerAddCondition": {
		"prefix": "TriggerAddCondition",
		"body": "TriggerAddCondition( ${1:whichTrigger}, ${2:condition})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerClearActions": {
		"prefix": "TriggerClearActions",
		"body": "TriggerClearActions( ${1:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerClearConditions": {
		"prefix": "TriggerClearConditions",
		"body": "TriggerClearConditions( ${1:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerEvaluate": {
		"prefix": "TriggerEvaluate",
		"body": "TriggerEvaluate( ${1:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerExecute": {
		"prefix": "TriggerExecute",
		"body": "TriggerExecute( ${1:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerExecuteWait": {
		"prefix": "TriggerExecuteWait",
		"body": "TriggerExecuteWait( ${1:whichTrigger})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterDeathEvent": {
		"prefix": "TriggerRegisterDeathEvent",
		"body": "TriggerRegisterDeathEvent( ${1:whichTrigger}, ${2:whichWidget})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterDialogButtonEvent": {
		"prefix": "TriggerRegisterDialogButtonEvent",
		"body": "TriggerRegisterDialogButtonEvent( ${1:whichTrigger}, ${2:whichButton})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterDialogEvent": {
		"prefix": "TriggerRegisterDialogEvent",
		"body": "TriggerRegisterDialogEvent( ${1:whichTrigger}, ${2:whichDialog})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterEnterRegion": {
		"prefix": "TriggerRegisterEnterRegion",
		"body": "TriggerRegisterEnterRegion( ${1:whichTrigger}, ${2:whichRegion}, ${3:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterFilterUnitEvent": {
		"prefix": "TriggerRegisterFilterUnitEvent",
		"body": "TriggerRegisterFilterUnitEvent( ${1:whichTrigger}, ${2:whichUnit}, ${3:whichEvent}, ${4:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterGameEvent": {
		"prefix": "TriggerRegisterGameEvent",
		"body": "TriggerRegisterGameEvent( ${1:whichTrigger}, ${2:whichGameEvent})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterGameStateEvent": {
		"prefix": "TriggerRegisterGameStateEvent",
		"body": "TriggerRegisterGameStateEvent( ${1:whichTrigger}, ${2:whichState}, ${3:opcode}, ${4:limitval})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterLeaveRegion": {
		"prefix": "TriggerRegisterLeaveRegion",
		"body": "TriggerRegisterLeaveRegion( ${1:whichTrigger}, ${2:whichRegion}, ${3:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterPlayerAllianceChange": {
		"prefix": "TriggerRegisterPlayerAllianceChange",
		"body": "TriggerRegisterPlayerAllianceChange( ${1:whichTrigger}, ${2:whichPlayer}, ${3:whichAlliance})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterPlayerChatEvent": {
		"prefix": "TriggerRegisterPlayerChatEvent",
		"body": "TriggerRegisterPlayerChatEvent( ${1:whichTrigger}, ${2:whichPlayer}, ${3:chatMessageToDetect}, ${4:exactMatchOnly})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterPlayerEvent": {
		"prefix": "TriggerRegisterPlayerEvent",
		"body": "TriggerRegisterPlayerEvent( ${1:whichTrigger}, ${2:whichPlayer}, ${3:whichPlayerEvent})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterPlayerStateEvent": {
		"prefix": "TriggerRegisterPlayerStateEvent",
		"body": "TriggerRegisterPlayerStateEvent( ${1:whichTrigger}, ${2:whichPlayer}, ${3:whichState}, ${4:opcode}, ${5:limitval})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterPlayerUnitEvent": {
		"prefix": "TriggerRegisterPlayerUnitEvent",
		"body": "TriggerRegisterPlayerUnitEvent( ${1:whichTrigger}, ${2:whichPlayer}, ${3:whichPlayerUnitEvent}, ${4:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterTimerEvent": {
		"prefix": "TriggerRegisterTimerEvent",
		"body": "TriggerRegisterTimerEvent( ${1:whichTrigger}, ${2:timeout}, ${3:periodic})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterTimerExpireEvent": {
		"prefix": "TriggerRegisterTimerExpireEvent",
		"body": "TriggerRegisterTimerExpireEvent( ${1:whichTrigger}, ${2:t})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterTrackableHitEvent": {
		"prefix": "TriggerRegisterTrackableHitEvent",
		"body": "TriggerRegisterTrackableHitEvent( ${1:whichTrigger}, ${2:t})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterTrackableTrackEvent": {
		"prefix": "TriggerRegisterTrackableTrackEvent",
		"body": "TriggerRegisterTrackableTrackEvent( ${1:whichTrigger}, ${2:t})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterUnitEvent": {
		"prefix": "TriggerRegisterUnitEvent",
		"body": "TriggerRegisterUnitEvent( ${1:whichTrigger}, ${2:whichUnit}, ${3:whichEvent})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterUnitInRange": {
		"prefix": "TriggerRegisterUnitInRange",
		"body": "TriggerRegisterUnitInRange( ${1:whichTrigger}, ${2:whichUnit}, ${3:range}, ${4:filter})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterUnitStateEvent": {
		"prefix": "TriggerRegisterUnitStateEvent",
		"body": "TriggerRegisterUnitStateEvent( ${1:whichTrigger}, ${2:whichUnit}, ${3:whichState}, ${4:opcode}, ${5:limitval})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRegisterVariableEvent": {
		"prefix": "TriggerRegisterVariableEvent",
		"body": "TriggerRegisterVariableEvent( ${1:whichTrigger}, ${2:varName}, ${3:opcode}, ${4:limitval})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRemoveAction": {
		"prefix": "TriggerRemoveAction",
		"body": "TriggerRemoveAction( ${1:whichTrigger}, ${2:whichAction})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerRemoveCondition": {
		"prefix": "TriggerRemoveCondition",
		"body": "TriggerRemoveCondition( ${1:whichTrigger}, ${2:whichCondition})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerSleepAction": {
		"prefix": "TriggerSleepAction",
		"body": "TriggerSleepAction( ${1:timeout})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerSyncReady": {
		"prefix": "TriggerSyncReady",
		"body": "TriggerSyncReady()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerSyncStart": {
		"prefix": "TriggerSyncStart",
		"body": "TriggerSyncStart()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerWaitForSound": {
		"prefix": "TriggerWaitForSound",
		"body": "TriggerWaitForSound( ${1:s}, ${2:offset})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"TriggerWaitOnSleeps": {
		"prefix": "TriggerWaitOnSleeps",
		"body": "TriggerWaitOnSleeps( ${1:whichTrigger}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitAddAbility": {
		"prefix": "UnitAddAbility",
		"body": "UnitAddAbility( ${1:whichUnit}, ${2:abilityId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitAddIndicator": {
		"prefix": "UnitAddIndicator",
		"body": "UnitAddIndicator( ${1:whichUnit}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitAddItem": {
		"prefix": "UnitAddItem",
		"body": "UnitAddItem( ${1:whichUnit}, ${2:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitAddItemById": {
		"prefix": "UnitAddItemById",
		"body": "UnitAddItemById( ${1:whichUnit}, ${2:itemId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitAddItemToSlotById": {
		"prefix": "UnitAddItemToSlotById",
		"body": "UnitAddItemToSlotById( ${1:whichUnit}, ${2:itemId}, ${3:itemSlot})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitAddSleep": {
		"prefix": "UnitAddSleep",
		"body": "UnitAddSleep( ${1:whichUnit}, ${2:add})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitAddSleepPerm": {
		"prefix": "UnitAddSleepPerm",
		"body": "UnitAddSleepPerm( ${1:whichUnit}, ${2:add})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitAddType": {
		"prefix": "UnitAddType",
		"body": "UnitAddType( ${1:whichUnit}, ${2:whichUnitType})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitApplyTimedLife": {
		"prefix": "UnitApplyTimedLife",
		"body": "UnitApplyTimedLife( ${1:whichUnit}, ${2:buffId}, ${3:duration})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitCanSleep": {
		"prefix": "UnitCanSleep",
		"body": "UnitCanSleep( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitCanSleepPerm": {
		"prefix": "UnitCanSleepPerm",
		"body": "UnitCanSleepPerm( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitCountBuffsEx": {
		"prefix": "UnitCountBuffsEx",
		"body": "UnitCountBuffsEx( ${1:whichUnit}, ${2:removePositive}, ${3:removeNegative}, ${4:magic}, ${5:physical}, ${6:timedLife}, ${7:aura}, ${8:autoDispel})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitDamagePoint": {
		"prefix": "UnitDamagePoint",
		"body": "UnitDamagePoint( ${1:whichUnit}, ${2:delay}, ${3:radius}, ${4:x}, ${5:y}, ${6:amount}, ${7:attack}, ${8:ranged}, ${9:attackType}, ${10:damageType}, ${11:weaponType})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitDamageTarget": {
		"prefix": "UnitDamageTarget",
		"body": "UnitDamageTarget( ${1:whichUnit}, ${2:target}, ${3:amount}, ${4:attack}, ${5:ranged}, ${6:attackType}, ${7:damageType}, ${8:weaponType})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitDropItemPoint": {
		"prefix": "UnitDropItemPoint",
		"body": "UnitDropItemPoint( ${1:whichUnit}, ${2:whichItem}, ${3:x}, ${4:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitDropItemSlot": {
		"prefix": "UnitDropItemSlot",
		"body": "UnitDropItemSlot( ${1:whichUnit}, ${2:whichItem}, ${3:slot})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitDropItemTarget": {
		"prefix": "UnitDropItemTarget",
		"body": "UnitDropItemTarget( ${1:whichUnit}, ${2:whichItem}, ${3:target})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitHasBuffsEx": {
		"prefix": "UnitHasBuffsEx",
		"body": "UnitHasBuffsEx( ${1:whichUnit}, ${2:removePositive}, ${3:removeNegative}, ${4:magic}, ${5:physical}, ${6:timedLife}, ${7:aura}, ${8:autoDispel})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitHasItem": {
		"prefix": "UnitHasItem",
		"body": "UnitHasItem( ${1:whichUnit}, ${2:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitId": {
		"prefix": "UnitId",
		"body": "UnitId( ${1:unitIdString})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitId2String": {
		"prefix": "UnitId2String",
		"body": "UnitId2String( ${1:unitId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitIgnoreAlarm": {
		"prefix": "UnitIgnoreAlarm",
		"body": "UnitIgnoreAlarm( ${1:whichUnit}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitIgnoreAlarmToggled": {
		"prefix": "UnitIgnoreAlarmToggled",
		"body": "UnitIgnoreAlarmToggled( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitInventorySize": {
		"prefix": "UnitInventorySize",
		"body": "UnitInventorySize( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitIsSleeping": {
		"prefix": "UnitIsSleeping",
		"body": "UnitIsSleeping( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitItemInSlot": {
		"prefix": "UnitItemInSlot",
		"body": "UnitItemInSlot( ${1:whichUnit}, ${2:itemSlot})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitMakeAbilityPermanent": {
		"prefix": "UnitMakeAbilityPermanent",
		"body": "UnitMakeAbilityPermanent( ${1:whichUnit}, ${2:permanent}, ${3:abilityId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitModifySkillPoints": {
		"prefix": "UnitModifySkillPoints",
		"body": "UnitModifySkillPoints( ${1:whichHero}, ${2:skillPointDelta})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitPauseTimedLife": {
		"prefix": "UnitPauseTimedLife",
		"body": "UnitPauseTimedLife( ${1:whichUnit}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitPoolAddUnitType": {
		"prefix": "UnitPoolAddUnitType",
		"body": "UnitPoolAddUnitType( ${1:whichPool}, ${2:unitId}, ${3:weight})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitPoolRemoveUnitType": {
		"prefix": "UnitPoolRemoveUnitType",
		"body": "UnitPoolRemoveUnitType( ${1:whichPool}, ${2:unitId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitRemoveAbility": {
		"prefix": "UnitRemoveAbility",
		"body": "UnitRemoveAbility( ${1:whichUnit}, ${2:abilityId})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitRemoveBuffs": {
		"prefix": "UnitRemoveBuffs",
		"body": "UnitRemoveBuffs( ${1:whichUnit}, ${2:removePositive}, ${3:removeNegative})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitRemoveBuffsEx": {
		"prefix": "UnitRemoveBuffsEx",
		"body": "UnitRemoveBuffsEx( ${1:whichUnit}, ${2:removePositive}, ${3:removeNegative}, ${4:magic}, ${5:physical}, ${6:timedLife}, ${7:aura}, ${8:autoDispel})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitRemoveItem": {
		"prefix": "UnitRemoveItem",
		"body": "UnitRemoveItem( ${1:whichUnit}, ${2:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitRemoveItemFromSlot": {
		"prefix": "UnitRemoveItemFromSlot",
		"body": "UnitRemoveItemFromSlot( ${1:whichUnit}, ${2:itemSlot})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitRemoveType": {
		"prefix": "UnitRemoveType",
		"body": "UnitRemoveType( ${1:whichUnit}, ${2:whichUnitType})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitResetCooldown": {
		"prefix": "UnitResetCooldown",
		"body": "UnitResetCooldown( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitSetConstructionProgress": {
		"prefix": "UnitSetConstructionProgress",
		"body": "UnitSetConstructionProgress( ${1:whichUnit}, ${2:constructionPercentage})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitSetUpgradeProgress": {
		"prefix": "UnitSetUpgradeProgress",
		"body": "UnitSetUpgradeProgress( ${1:whichUnit}, ${2:upgradePercentage})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitSetUsesAltIcon": {
		"prefix": "UnitSetUsesAltIcon",
		"body": "UnitSetUsesAltIcon( ${1:whichUnit}, ${2:flag})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitShareVision": {
		"prefix": "UnitShareVision",
		"body": "UnitShareVision( ${1:whichUnit}, ${2:whichPlayer}, ${3:share})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitStripHeroLevel": {
		"prefix": "UnitStripHeroLevel",
		"body": "UnitStripHeroLevel( ${1:whichHero}, ${2:howManyLevels})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitSuspendDecay": {
		"prefix": "UnitSuspendDecay",
		"body": "UnitSuspendDecay( ${1:whichUnit}, ${2:suspend})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitUseItem": {
		"prefix": "UnitUseItem",
		"body": "UnitUseItem( ${1:whichUnit}, ${2:whichItem})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitUseItemPoint": {
		"prefix": "UnitUseItemPoint",
		"body": "UnitUseItemPoint( ${1:whichUnit}, ${2:whichItem}, ${3:x}, ${4:y})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitUseItemTarget": {
		"prefix": "UnitUseItemTarget",
		"body": "UnitUseItemTarget( ${1:whichUnit}, ${2:whichItem}, ${3:target})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnitWakeUp": {
		"prefix": "UnitWakeUp",
		"body": "UnitWakeUp( ${1:whichUnit})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"UnregisterStackedSound": {
		"prefix": "UnregisterStackedSound",
		"body": "UnregisterStackedSound( ${1:soundHandle}, ${2:byPosition}, ${3:rectwidth}, ${4:rectheight})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"VersionCompatible": {
		"prefix": "VersionCompatible",
		"body": "VersionCompatible( ${1:whichVersion})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"VersionGet": {
		"prefix": "VersionGet",
		"body": "VersionGet()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"VersionSupported": {
		"prefix": "VersionSupported",
		"body": "VersionSupported( ${1:whichVersion})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"VolumeGroupReset": {
		"prefix": "VolumeGroupReset",
		"body": "VolumeGroupReset()",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"VolumeGroupSetVolume": {
		"prefix": "VolumeGroupSetVolume",
		"body": "VolumeGroupSetVolume( ${1:vgroup}, ${2:scale})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"WaygateActivate": {
		"prefix": "WaygateActivate",
		"body": "WaygateActivate( ${1:waygate}, ${2:activate})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"WaygateGetDestinationX": {
		"prefix": "WaygateGetDestinationX",
		"body": "WaygateGetDestinationX( ${1:waygate})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"WaygateGetDestinationY": {
		"prefix": "WaygateGetDestinationY",
		"body": "WaygateGetDestinationY( ${1:waygate})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"WaygateIsActive": {
		"prefix": "WaygateIsActive",
		"body": "WaygateIsActive( ${1:waygate})",
		"description": "",
		"scope": "source.jass,source.j"
	},
	"WaygateSetDestination": {
		"prefix": "WaygateSetDestination",
		"body": "WaygateSetDestination( ${1:waygate}, ${2:x}, ${3:y})",
		"description": "",
		"scope": "source.jass,source.j"
	}
}